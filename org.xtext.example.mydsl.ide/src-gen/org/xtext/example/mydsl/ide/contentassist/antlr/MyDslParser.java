/*
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getOperatorAccess().getAlternatives(), "rule__Operator__Alternatives");
			builder.put(grammarAccess.getVariableTypeAccess().getTypeAlternatives_1_0(), "rule__VariableType__TypeAlternatives_1_0");
			builder.put(grammarAccess.getTaskBodyAccess().getAlternatives_3(), "rule__TaskBody__Alternatives_3");
			builder.put(grammarAccess.getBlockExpressionsAccess().getAlternatives(), "rule__BlockExpressions__Alternatives");
			builder.put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
			builder.put(grammarAccess.getArrayDimensionAccess().getAlternatives_2(), "rule__ArrayDimension__Alternatives_2");
			builder.put(grammarAccess.getVariableDeclerationExpressionAccess().getAlternatives_1(), "rule__VariableDeclerationExpression__Alternatives_1");
			builder.put(grammarAccess.getAtomicAccess().getAlternatives(), "rule__Atomic__Alternatives");
			builder.put(grammarAccess.getInkAppAccess().getGroup(), "rule__InkApp__Group__0");
			builder.put(grammarAccess.getBreakExpressionAccess().getGroup(), "rule__BreakExpression__Group__0");
			builder.put(grammarAccess.getVariableTypeAccess().getGroup(), "rule__VariableType__Group__0");
			builder.put(grammarAccess.getGlobalVariableExpressionAccess().getGroup(), "rule__GlobalVariableExpression__Group__0");
			builder.put(grammarAccess.getEntryTaskAccess().getGroup(), "rule__EntryTask__Group__0");
			builder.put(grammarAccess.getTaskAccess().getGroup(), "rule__Task__Group__0");
			builder.put(grammarAccess.getIfExpressionAccess().getGroup(), "rule__IfExpression__Group__0");
			builder.put(grammarAccess.getIfExpressionAccess().getGroup_8(), "rule__IfExpression__Group_8__0");
			builder.put(grammarAccess.getIfExpressionAccess().getGroup_9(), "rule__IfExpression__Group_9__0");
			builder.put(grammarAccess.getForExpressionAccess().getGroup(), "rule__ForExpression__Group__0");
			builder.put(grammarAccess.getWhileExpressionAccess().getGroup(), "rule__WhileExpression__Group__0");
			builder.put(grammarAccess.getBuiltinFunctionCallExpressionAccess().getGroup(), "rule__BuiltinFunctionCallExpression__Group__0");
			builder.put(grammarAccess.getBuiltinFunctionCallExpressionAccess().getGroup_3(), "rule__BuiltinFunctionCallExpression__Group_3__0");
			builder.put(grammarAccess.getBuiltinFunctionCallExpressionAccess().getGroup_3_1(), "rule__BuiltinFunctionCallExpression__Group_3_1__0");
			builder.put(grammarAccess.getTaskBodyAccess().getGroup(), "rule__TaskBody__Group__0");
			builder.put(grammarAccess.getTaskBodyAccess().getGroup_3_0(), "rule__TaskBody__Group_3_0__0");
			builder.put(grammarAccess.getStatementBodyAccess().getGroup(), "rule__StatementBody__Group__0");
			builder.put(grammarAccess.getOperationAccess().getGroup(), "rule__Operation__Group__0");
			builder.put(grammarAccess.getOperationAccess().getGroup_1(), "rule__Operation__Group_1__0");
			builder.put(grammarAccess.getOperationAccess().getGroup_1_1(), "rule__Operation__Group_1_1__0");
			builder.put(grammarAccess.getArrayDimensionAccess().getGroup(), "rule__ArrayDimension__Group__0");
			builder.put(grammarAccess.getVariableDeclerationExpressionAccess().getGroup(), "rule__VariableDeclerationExpression__Group__0");
			builder.put(grammarAccess.getVariableDeclerationExpressionAccess().getGroup_1_1(), "rule__VariableDeclerationExpression__Group_1_1__0");
			builder.put(grammarAccess.getAtomicAccess().getGroup_0(), "rule__Atomic__Group_0__0");
			builder.put(grammarAccess.getAtomicAccess().getGroup_1(), "rule__Atomic__Group_1__0");
			builder.put(grammarAccess.getAtomicAccess().getGroup_2(), "rule__Atomic__Group_2__0");
			builder.put(grammarAccess.getAtomicAccess().getGroup_3(), "rule__Atomic__Group_3__0");
			builder.put(grammarAccess.getAtomicAccess().getGroup_4(), "rule__Atomic__Group_4__0");
			builder.put(grammarAccess.getAtomicAccess().getGroup_5(), "rule__Atomic__Group_5__0");
			builder.put(grammarAccess.getInkAppAccess().getGlobalsAssignment_0(), "rule__InkApp__GlobalsAssignment_0");
			builder.put(grammarAccess.getInkAppAccess().getTasksAssignment_1(), "rule__InkApp__TasksAssignment_1");
			builder.put(grammarAccess.getInkAppAccess().getEntryAssignment_2(), "rule__InkApp__EntryAssignment_2");
			builder.put(grammarAccess.getBreakExpressionAccess().getBreakAssignment_1(), "rule__BreakExpression__BreakAssignment_1");
			builder.put(grammarAccess.getVariableTypeAccess().getTypeAssignment_1(), "rule__VariableType__TypeAssignment_1");
			builder.put(grammarAccess.getGlobalVariableExpressionAccess().getVariableAssignment_2(), "rule__GlobalVariableExpression__VariableAssignment_2");
			builder.put(grammarAccess.getEntryTaskAccess().getTaskAssignment_1(), "rule__EntryTask__TaskAssignment_1");
			builder.put(grammarAccess.getTaskAccess().getNameAssignment_2(), "rule__Task__NameAssignment_2");
			builder.put(grammarAccess.getTaskAccess().getTaskbodyAssignment_4(), "rule__Task__TaskbodyAssignment_4");
			builder.put(grammarAccess.getIfExpressionAccess().getIfconditionAssignment_3(), "rule__IfExpression__IfconditionAssignment_3");
			builder.put(grammarAccess.getIfExpressionAccess().getIfbodyAssignment_6(), "rule__IfExpression__IfbodyAssignment_6");
			builder.put(grammarAccess.getIfExpressionAccess().getElseifconditionAssignment_8_3(), "rule__IfExpression__ElseifconditionAssignment_8_3");
			builder.put(grammarAccess.getIfExpressionAccess().getElseifbodyAssignment_8_6(), "rule__IfExpression__ElseifbodyAssignment_8_6");
			builder.put(grammarAccess.getIfExpressionAccess().getElsebodyAssignment_9_2(), "rule__IfExpression__ElsebodyAssignment_9_2");
			builder.put(grammarAccess.getForExpressionAccess().getInitialAssignment_3(), "rule__ForExpression__InitialAssignment_3");
			builder.put(grammarAccess.getForExpressionAccess().getTestAssignment_5(), "rule__ForExpression__TestAssignment_5");
			builder.put(grammarAccess.getForExpressionAccess().getUpdateAssignment_7(), "rule__ForExpression__UpdateAssignment_7");
			builder.put(grammarAccess.getForExpressionAccess().getBodyAssignment_10(), "rule__ForExpression__BodyAssignment_10");
			builder.put(grammarAccess.getWhileExpressionAccess().getTestAssignment_3(), "rule__WhileExpression__TestAssignment_3");
			builder.put(grammarAccess.getWhileExpressionAccess().getBodyAssignment_6(), "rule__WhileExpression__BodyAssignment_6");
			builder.put(grammarAccess.getBuiltinFunctionCallExpressionAccess().getFunctionAssignment_1(), "rule__BuiltinFunctionCallExpression__FunctionAssignment_1");
			builder.put(grammarAccess.getBuiltinFunctionCallExpressionAccess().getParametersAssignment_3_0(), "rule__BuiltinFunctionCallExpression__ParametersAssignment_3_0");
			builder.put(grammarAccess.getBuiltinFunctionCallExpressionAccess().getParametersAssignment_3_1_1(), "rule__BuiltinFunctionCallExpression__ParametersAssignment_3_1_1");
			builder.put(grammarAccess.getTaskBodyAccess().getBodyAssignment_1(), "rule__TaskBody__BodyAssignment_1");
			builder.put(grammarAccess.getTaskBodyAccess().getBodyAssignment_2(), "rule__TaskBody__BodyAssignment_2");
			builder.put(grammarAccess.getTaskBodyAccess().getNexttaskAssignment_3_0_1(), "rule__TaskBody__NexttaskAssignment_3_0_1");
			builder.put(grammarAccess.getTaskBodyAccess().getEndtaskAssignment_3_1(), "rule__TaskBody__EndtaskAssignment_3_1");
			builder.put(grammarAccess.getStatementBodyAccess().getBodyAssignment_1(), "rule__StatementBody__BodyAssignment_1");
			builder.put(grammarAccess.getStatementBodyAccess().getBodyAssignment_2(), "rule__StatementBody__BodyAssignment_2");
			builder.put(grammarAccess.getOperationAccess().getOperatorAssignment_1_1_0(), "rule__Operation__OperatorAssignment_1_1_0");
			builder.put(grammarAccess.getOperationAccess().getRightAssignment_1_1_1(), "rule__Operation__RightAssignment_1_1_1");
			builder.put(grammarAccess.getArrayDimensionAccess().getIndexAssignment_2_0(), "rule__ArrayDimension__IndexAssignment_2_0");
			builder.put(grammarAccess.getArrayDimensionAccess().getSizeAssignment_2_1(), "rule__ArrayDimension__SizeAssignment_2_1");
			builder.put(grammarAccess.getVariableDeclerationExpressionAccess().getTypeAssignment_0(), "rule__VariableDeclerationExpression__TypeAssignment_0");
			builder.put(grammarAccess.getVariableDeclerationExpressionAccess().getNameAssignment_1_0(), "rule__VariableDeclerationExpression__NameAssignment_1_0");
			builder.put(grammarAccess.getVariableDeclerationExpressionAccess().getNameAssignment_1_1_0(), "rule__VariableDeclerationExpression__NameAssignment_1_1_0");
			builder.put(grammarAccess.getVariableDeclerationExpressionAccess().getDimensionAssignment_1_1_1(), "rule__VariableDeclerationExpression__DimensionAssignment_1_1_1");
			builder.put(grammarAccess.getAtomicAccess().getValueAssignment_0_1(), "rule__Atomic__ValueAssignment_0_1");
			builder.put(grammarAccess.getAtomicAccess().getValueAssignment_1_1(), "rule__Atomic__ValueAssignment_1_1");
			builder.put(grammarAccess.getAtomicAccess().getValueAssignment_2_1(), "rule__Atomic__ValueAssignment_2_1");
			builder.put(grammarAccess.getAtomicAccess().getValueAssignment_3_1(), "rule__Atomic__ValueAssignment_3_1");
			builder.put(grammarAccess.getAtomicAccess().getVariableReferenceAssignment_4_1(), "rule__Atomic__VariableReferenceAssignment_4_1");
			builder.put(grammarAccess.getAtomicAccess().getDimensionAssignment_4_2(), "rule__Atomic__DimensionAssignment_4_2");
			builder.put(grammarAccess.getAtomicAccess().getVariableReferenceAssignment_5_1(), "rule__Atomic__VariableReferenceAssignment_5_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyDslGrammarAccess grammarAccess;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
