/*
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class InkAppElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.InkApp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGlobalsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cGlobalsGlobalVariableExpressionParserRuleCall_0_0 = (RuleCall)cGlobalsAssignment_0.eContents().get(0);
		private final Assignment cTasksAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTasksTaskParserRuleCall_1_0 = (RuleCall)cTasksAssignment_1.eContents().get(0);
		private final Assignment cEntryAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEntryEntryTaskParserRuleCall_2_0 = (RuleCall)cEntryAssignment_2.eContents().get(0);
		
		//InkApp:
		//	globals+=GlobalVariableExpression*
		//	tasks+=Task*
		//	entry=EntryTask;
		@Override public ParserRule getRule() { return rule; }
		
		//globals+=GlobalVariableExpression* tasks+=Task* entry=EntryTask
		public Group getGroup() { return cGroup; }
		
		//globals+=GlobalVariableExpression*
		public Assignment getGlobalsAssignment_0() { return cGlobalsAssignment_0; }
		
		//GlobalVariableExpression
		public RuleCall getGlobalsGlobalVariableExpressionParserRuleCall_0_0() { return cGlobalsGlobalVariableExpressionParserRuleCall_0_0; }
		
		//tasks+=Task*
		public Assignment getTasksAssignment_1() { return cTasksAssignment_1; }
		
		//Task
		public RuleCall getTasksTaskParserRuleCall_1_0() { return cTasksTaskParserRuleCall_1_0; }
		
		//entry=EntryTask
		public Assignment getEntryAssignment_2() { return cEntryAssignment_2; }
		
		//EntryTask
		public RuleCall getEntryEntryTaskParserRuleCall_2_0() { return cEntryEntryTaskParserRuleCall_2_0; }
	}
	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPlusSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSolidusKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cAsteriskKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cLessThanSignEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cEqualsSignEqualsSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cExclamationMarkEqualsSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cLessThanSignKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cGreaterThanSignKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cEqualsSignKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cANDKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cORKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		
		//Operator:
		//	'-' | '+' | '/' | '*' | '>=' | '<=' | '==' | '!=' | '<' | '>' | '=' | 'AND' | 'OR';
		@Override public ParserRule getRule() { return rule; }
		
		//'-' | '+' | '/' | '*' | '>=' | '<=' | '==' | '!=' | '<' | '>' | '=' | 'AND' | 'OR'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1() { return cPlusSignKeyword_1; }
		
		//'/'
		public Keyword getSolidusKeyword_2() { return cSolidusKeyword_2; }
		
		//'*'
		public Keyword getAsteriskKeyword_3() { return cAsteriskKeyword_3; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_4() { return cGreaterThanSignEqualsSignKeyword_4; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_5() { return cLessThanSignEqualsSignKeyword_5; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_6() { return cEqualsSignEqualsSignKeyword_6; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_7() { return cExclamationMarkEqualsSignKeyword_7; }
		
		//'<'
		public Keyword getLessThanSignKeyword_8() { return cLessThanSignKeyword_8; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_9() { return cGreaterThanSignKeyword_9; }
		
		//'='
		public Keyword getEqualsSignKeyword_10() { return cEqualsSignKeyword_10; }
		
		//'AND'
		public Keyword getANDKeyword_11() { return cANDKeyword_11; }
		
		//'OR'
		public Keyword getORKeyword_12() { return cORKeyword_12; }
	}
	public class BuiltinFunctionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BuiltinFunctions");
		private final Keyword cPrintKeyword = (Keyword)rule.eContents().get(1);
		
		//BuiltinFunctions:
		//	'print';
		@Override public ParserRule getRule() { return rule; }
		
		//'print'
		public Keyword getPrintKeyword() { return cPrintKeyword; }
	}
	public class BreakExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BreakExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBreakExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cBreakAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cBreakBreakKeyword_1_0 = (Keyword)cBreakAssignment_1.eContents().get(0);
		
		//BreakExpression:
		//	{BreakExpression} break='break';
		@Override public ParserRule getRule() { return rule; }
		
		//{BreakExpression} break='break'
		public Group getGroup() { return cGroup; }
		
		//{BreakExpression}
		public Action getBreakExpressionAction_0() { return cBreakExpressionAction_0; }
		
		//break='break'
		public Assignment getBreakAssignment_1() { return cBreakAssignment_1; }
		
		//'break'
		public Keyword getBreakBreakKeyword_1_0() { return cBreakBreakKeyword_1_0; }
	}
	public class VariableTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.VariableType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cTypeAlternatives_1_0 = (Alternatives)cTypeAssignment_1.eContents().get(0);
		private final Keyword cTypeStringKeyword_1_0_0 = (Keyword)cTypeAlternatives_1_0.eContents().get(0);
		private final Keyword cTypeIntegerKeyword_1_0_1 = (Keyword)cTypeAlternatives_1_0.eContents().get(1);
		private final Keyword cTypeBooleanKeyword_1_0_2 = (Keyword)cTypeAlternatives_1_0.eContents().get(2);
		
		//VariableType:
		//	{VariableType} type=('string' | 'integer' | 'boolean');
		@Override public ParserRule getRule() { return rule; }
		
		//{VariableType} type=('string' | 'integer' | 'boolean')
		public Group getGroup() { return cGroup; }
		
		//{VariableType}
		public Action getVariableTypeAction_0() { return cVariableTypeAction_0; }
		
		//type=('string' | 'integer' | 'boolean')
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//('string' | 'integer' | 'boolean')
		public Alternatives getTypeAlternatives_1_0() { return cTypeAlternatives_1_0; }
		
		//'string'
		public Keyword getTypeStringKeyword_1_0_0() { return cTypeStringKeyword_1_0_0; }
		
		//'integer'
		public Keyword getTypeIntegerKeyword_1_0_1() { return cTypeIntegerKeyword_1_0_1; }
		
		//'boolean'
		public Keyword getTypeBooleanKeyword_1_0_2() { return cTypeBooleanKeyword_1_0_2; }
	}
	public class GlobalVariableExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.GlobalVariableExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGlobalVariableExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGLOBALKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableVariableDeclerationExpressionParserRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		
		//GlobalVariableExpression:
		//	{GlobalVariableExpression}
		//	'GLOBAL' variable=VariableDeclerationExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{GlobalVariableExpression} 'GLOBAL' variable=VariableDeclerationExpression
		public Group getGroup() { return cGroup; }
		
		//{GlobalVariableExpression}
		public Action getGlobalVariableExpressionAction_0() { return cGlobalVariableExpressionAction_0; }
		
		//'GLOBAL'
		public Keyword getGLOBALKeyword_1() { return cGLOBALKeyword_1; }
		
		//variable=VariableDeclerationExpression
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }
		
		//VariableDeclerationExpression
		public RuleCall getVariableVariableDeclerationExpressionParserRuleCall_2_0() { return cVariableVariableDeclerationExpressionParserRuleCall_2_0; }
	}
	public class EntryTaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EntryTask");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTaskAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTaskTaskParserRuleCall_1_0 = (RuleCall)cTaskAssignment_1.eContents().get(0);
		
		////ConstantVariableExpression:
		////	{ConstantVariableExpression}
		////	'CONSTANT' variable = VariableDeclerationExpression
		////;
		////Main:
		////	{Main}
		////	variableDeclerations += VariableDecleration*
		////	body += Expression*
		////;
		////
		////FunctionBody:
		////	{FunctionBody}
		////	variableDeclerations += VariableDecleration* 
		////	body += Expression*
		////;
		//EntryTask:
		//	'entry' task=Task;
		@Override public ParserRule getRule() { return rule; }
		
		//'entry' task=Task
		public Group getGroup() { return cGroup; }
		
		//'entry'
		public Keyword getEntryKeyword_0() { return cEntryKeyword_0; }
		
		//task=Task
		public Assignment getTaskAssignment_1() { return cTaskAssignment_1; }
		
		//Task
		public RuleCall getTaskTaskParserRuleCall_1_0() { return cTaskTaskParserRuleCall_1_0; }
	}
	public class TaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Task");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTaskAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTaskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTaskbodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTaskbodyTaskBodyParserRuleCall_4_0 = (RuleCall)cTaskbodyAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Task:
		//	{Task}
		//	'task' name=ID '{'
		//	taskbody=TaskBody
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Task} 'task' name=ID '{' taskbody=TaskBody '}'
		public Group getGroup() { return cGroup; }
		
		//{Task}
		public Action getTaskAction_0() { return cTaskAction_0; }
		
		//'task'
		public Keyword getTaskKeyword_1() { return cTaskKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//taskbody=TaskBody
		public Assignment getTaskbodyAssignment_4() { return cTaskbodyAssignment_4; }
		
		//TaskBody
		public RuleCall getTaskbodyTaskBodyParserRuleCall_4_0() { return cTaskbodyTaskBodyParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class IfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.IfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIfExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIfconditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIfconditionOperationExpressionParserRuleCall_3_0 = (RuleCall)cIfconditionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cIfbodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cIfbodyStatementBodyParserRuleCall_6_0 = (RuleCall)cIfbodyAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cElseKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cIfKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Assignment cElseifconditionAssignment_8_3 = (Assignment)cGroup_8.eContents().get(3);
		private final RuleCall cElseifconditionOperationExpressionParserRuleCall_8_3_0 = (RuleCall)cElseifconditionAssignment_8_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8_4 = (Keyword)cGroup_8.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_8_5 = (Keyword)cGroup_8.eContents().get(5);
		private final Assignment cElseifbodyAssignment_8_6 = (Assignment)cGroup_8.eContents().get(6);
		private final RuleCall cElseifbodyStatementBodyParserRuleCall_8_6_0 = (RuleCall)cElseifbodyAssignment_8_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_7 = (Keyword)cGroup_8.eContents().get(7);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cElseKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cElsebodyAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cElsebodyStatementBodyParserRuleCall_9_2_0 = (RuleCall)cElsebodyAssignment_9_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9_3 = (Keyword)cGroup_9.eContents().get(3);
		
		//IfExpression:
		//	{IfExpression}
		//	'if' '(' ifcondition=OperationExpression ')' '{'
		//	ifbody=StatementBody
		//	'}' ('else' 'if' '(' elseifcondition+=OperationExpression ')' '{'
		//	elseifbody+=StatementBody
		//	'}')* ('else' '{'
		//	elsebody=StatementBody
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{IfExpression} 'if' '(' ifcondition=OperationExpression ')' '{' ifbody=StatementBody '}' ('else' 'if' '('
		//elseifcondition+=OperationExpression ')' '{' elseifbody+=StatementBody '}')* ('else' '{' elsebody=StatementBody '}')?
		public Group getGroup() { return cGroup; }
		
		//{IfExpression}
		public Action getIfExpressionAction_0() { return cIfExpressionAction_0; }
		
		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//ifcondition=OperationExpression
		public Assignment getIfconditionAssignment_3() { return cIfconditionAssignment_3; }
		
		//OperationExpression
		public RuleCall getIfconditionOperationExpressionParserRuleCall_3_0() { return cIfconditionOperationExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//ifbody=StatementBody
		public Assignment getIfbodyAssignment_6() { return cIfbodyAssignment_6; }
		
		//StatementBody
		public RuleCall getIfbodyStatementBodyParserRuleCall_6_0() { return cIfbodyStatementBodyParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
		
		//('else' 'if' '(' elseifcondition+=OperationExpression ')' '{' elseifbody+=StatementBody '}')*
		public Group getGroup_8() { return cGroup_8; }
		
		//'else'
		public Keyword getElseKeyword_8_0() { return cElseKeyword_8_0; }
		
		//'if'
		public Keyword getIfKeyword_8_1() { return cIfKeyword_8_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_8_2() { return cLeftParenthesisKeyword_8_2; }
		
		//elseifcondition+=OperationExpression
		public Assignment getElseifconditionAssignment_8_3() { return cElseifconditionAssignment_8_3; }
		
		//OperationExpression
		public RuleCall getElseifconditionOperationExpressionParserRuleCall_8_3_0() { return cElseifconditionOperationExpressionParserRuleCall_8_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8_4() { return cRightParenthesisKeyword_8_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_5() { return cLeftCurlyBracketKeyword_8_5; }
		
		//elseifbody+=StatementBody
		public Assignment getElseifbodyAssignment_8_6() { return cElseifbodyAssignment_8_6; }
		
		//StatementBody
		public RuleCall getElseifbodyStatementBodyParserRuleCall_8_6_0() { return cElseifbodyStatementBodyParserRuleCall_8_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_7() { return cRightCurlyBracketKeyword_8_7; }
		
		//('else' '{' elsebody=StatementBody '}')?
		public Group getGroup_9() { return cGroup_9; }
		
		//'else'
		public Keyword getElseKeyword_9_0() { return cElseKeyword_9_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_9_1() { return cLeftCurlyBracketKeyword_9_1; }
		
		//elsebody=StatementBody
		public Assignment getElsebodyAssignment_9_2() { return cElsebodyAssignment_9_2; }
		
		//StatementBody
		public RuleCall getElsebodyStatementBodyParserRuleCall_9_2_0() { return cElsebodyStatementBodyParserRuleCall_9_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9_3() { return cRightCurlyBracketKeyword_9_3; }
	}
	public class ForExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ForExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInitialAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInitialOperationExpressionParserRuleCall_3_0 = (RuleCall)cInitialAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTestAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTestOperationExpressionParserRuleCall_5_0 = (RuleCall)cTestAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cUpdateAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cUpdateOperationExpressionParserRuleCall_7_0 = (RuleCall)cUpdateAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cLeftCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cBodyAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cBodyStatementBodyParserRuleCall_10_0 = (RuleCall)cBodyAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//ForExpression:
		//	{ForExpression}
		//	'for' '(' initial=OperationExpression ';' test=OperationExpression ';' update=OperationExpression ')' '{'
		//	body=StatementBody
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ForExpression} 'for' '(' initial=OperationExpression ';' test=OperationExpression ';' update=OperationExpression ')'
		//'{' body=StatementBody '}'
		public Group getGroup() { return cGroup; }
		
		//{ForExpression}
		public Action getForExpressionAction_0() { return cForExpressionAction_0; }
		
		//'for'
		public Keyword getForKeyword_1() { return cForKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//initial=OperationExpression
		public Assignment getInitialAssignment_3() { return cInitialAssignment_3; }
		
		//OperationExpression
		public RuleCall getInitialOperationExpressionParserRuleCall_3_0() { return cInitialOperationExpressionParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
		
		//test=OperationExpression
		public Assignment getTestAssignment_5() { return cTestAssignment_5; }
		
		//OperationExpression
		public RuleCall getTestOperationExpressionParserRuleCall_5_0() { return cTestOperationExpressionParserRuleCall_5_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
		
		//update=OperationExpression
		public Assignment getUpdateAssignment_7() { return cUpdateAssignment_7; }
		
		//OperationExpression
		public RuleCall getUpdateOperationExpressionParserRuleCall_7_0() { return cUpdateOperationExpressionParserRuleCall_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_9() { return cLeftCurlyBracketKeyword_9; }
		
		//body=StatementBody
		public Assignment getBodyAssignment_10() { return cBodyAssignment_10; }
		
		//StatementBody
		public RuleCall getBodyStatementBodyParserRuleCall_10_0() { return cBodyStatementBodyParserRuleCall_10_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class WhileExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.WhileExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWhileExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWhileKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTestAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTestOperationExpressionParserRuleCall_3_0 = (RuleCall)cTestAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyStatementBodyParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//WhileExpression:
		//	{WhileExpression}
		//	'while' '(' test=OperationExpression ')' '{'
		//	body=StatementBody
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{WhileExpression} 'while' '(' test=OperationExpression ')' '{' body=StatementBody '}'
		public Group getGroup() { return cGroup; }
		
		//{WhileExpression}
		public Action getWhileExpressionAction_0() { return cWhileExpressionAction_0; }
		
		//'while'
		public Keyword getWhileKeyword_1() { return cWhileKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//test=OperationExpression
		public Assignment getTestAssignment_3() { return cTestAssignment_3; }
		
		//OperationExpression
		public RuleCall getTestOperationExpressionParserRuleCall_3_0() { return cTestOperationExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//body=StatementBody
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }
		
		//StatementBody
		public RuleCall getBodyStatementBodyParserRuleCall_6_0() { return cBodyStatementBodyParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class BuiltinFunctionCallExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BuiltinFunctionCallExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBuiltinFunctionCallExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionBuiltinFunctionsParserRuleCall_1_0 = (RuleCall)cFunctionAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersAtomicParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersAtomicParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//BuiltinFunctionCallExpression:
		//	{BuiltinFunctionCallExpression} function=BuiltinFunctions '(' (parameters+=Atomic (',' parameters+=Atomic)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{BuiltinFunctionCallExpression} function=BuiltinFunctions '(' (parameters+=Atomic (',' parameters+=Atomic)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//{BuiltinFunctionCallExpression}
		public Action getBuiltinFunctionCallExpressionAction_0() { return cBuiltinFunctionCallExpressionAction_0; }
		
		//function=BuiltinFunctions
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }
		
		//BuiltinFunctions
		public RuleCall getFunctionBuiltinFunctionsParserRuleCall_1_0() { return cFunctionBuiltinFunctionsParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(parameters+=Atomic (',' parameters+=Atomic)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//parameters+=Atomic
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }
		
		//Atomic
		public RuleCall getParametersAtomicParserRuleCall_3_0_0() { return cParametersAtomicParserRuleCall_3_0_0; }
		
		//(',' parameters+=Atomic)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//parameters+=Atomic
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }
		
		//Atomic
		public RuleCall getParametersAtomicParserRuleCall_3_1_1_0() { return cParametersAtomicParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class TaskBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TaskBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTaskBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyVariableDeclerationExpressionParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyBlockExpressionsParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cNextKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cNexttaskAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final CrossReference cNexttaskTaskCrossReference_3_0_1_0 = (CrossReference)cNexttaskAssignment_3_0_1.eContents().get(0);
		private final RuleCall cNexttaskTaskIDTerminalRuleCall_3_0_1_0_1 = (RuleCall)cNexttaskTaskCrossReference_3_0_1_0.eContents().get(1);
		private final Assignment cEndtaskAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final Keyword cEndtaskEndKeyword_3_1_0 = (Keyword)cEndtaskAssignment_3_1.eContents().get(0);
		
		////AbstractFunctionCall:
		////	FunctionCall | 
		////	BuiltinFunctionCallExpression
		////;
		//TaskBody:
		//	{TaskBody} body+=VariableDeclerationExpression*
		//	body+=BlockExpressions* ('next' nexttask=[Task] | endtask='end');
		@Override public ParserRule getRule() { return rule; }
		
		//{TaskBody} body+=VariableDeclerationExpression* body+=BlockExpressions* ('next' nexttask=[Task] | endtask='end')
		public Group getGroup() { return cGroup; }
		
		//{TaskBody}
		public Action getTaskBodyAction_0() { return cTaskBodyAction_0; }
		
		//body+=VariableDeclerationExpression*
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }
		
		//VariableDeclerationExpression
		public RuleCall getBodyVariableDeclerationExpressionParserRuleCall_1_0() { return cBodyVariableDeclerationExpressionParserRuleCall_1_0; }
		
		//body+=BlockExpressions*
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//BlockExpressions
		public RuleCall getBodyBlockExpressionsParserRuleCall_2_0() { return cBodyBlockExpressionsParserRuleCall_2_0; }
		
		//('next' nexttask=[Task] | endtask='end')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'next' nexttask=[Task]
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'next'
		public Keyword getNextKeyword_3_0_0() { return cNextKeyword_3_0_0; }
		
		//nexttask=[Task]
		public Assignment getNexttaskAssignment_3_0_1() { return cNexttaskAssignment_3_0_1; }
		
		//[Task]
		public CrossReference getNexttaskTaskCrossReference_3_0_1_0() { return cNexttaskTaskCrossReference_3_0_1_0; }
		
		//ID
		public RuleCall getNexttaskTaskIDTerminalRuleCall_3_0_1_0_1() { return cNexttaskTaskIDTerminalRuleCall_3_0_1_0_1; }
		
		//endtask='end'
		public Assignment getEndtaskAssignment_3_1() { return cEndtaskAssignment_3_1; }
		
		//'end'
		public Keyword getEndtaskEndKeyword_3_1_0() { return cEndtaskEndKeyword_3_1_0; }
	}
	public class StatementBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.StatementBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatementBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyBlockExpressionsParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyBreakExpressionParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//StatementBody:
		//	{StatementBody} body+=BlockExpressions*
		//	body+=BreakExpression?;
		@Override public ParserRule getRule() { return rule; }
		
		//{StatementBody} body+=BlockExpressions* body+=BreakExpression?
		public Group getGroup() { return cGroup; }
		
		//{StatementBody}
		public Action getStatementBodyAction_0() { return cStatementBodyAction_0; }
		
		//body+=BlockExpressions*
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }
		
		//BlockExpressions
		public RuleCall getBodyBlockExpressionsParserRuleCall_1_0() { return cBodyBlockExpressionsParserRuleCall_1_0; }
		
		//body+=BreakExpression?
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//BreakExpression
		public RuleCall getBodyBreakExpressionParserRuleCall_2_0() { return cBodyBreakExpressionParserRuleCall_2_0; }
	}
	public class BlockExpressionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BlockExpressions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOperationExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cForExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWhileExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBuiltinFunctionCallExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//BlockExpressions:
		//	OperationExpression | IfExpression | ForExpression | WhileExpression | BuiltinFunctionCallExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//OperationExpression | IfExpression | ForExpression | WhileExpression | BuiltinFunctionCallExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OperationExpression
		public RuleCall getOperationExpressionParserRuleCall_0() { return cOperationExpressionParserRuleCall_0; }
		
		//IfExpression
		public RuleCall getIfExpressionParserRuleCall_1() { return cIfExpressionParserRuleCall_1; }
		
		//ForExpression
		public RuleCall getForExpressionParserRuleCall_2() { return cForExpressionParserRuleCall_2; }
		
		//WhileExpression
		public RuleCall getWhileExpressionParserRuleCall_3() { return cWhileExpressionParserRuleCall_3; }
		
		//BuiltinFunctionCallExpression
		public RuleCall getBuiltinFunctionCallExpressionParserRuleCall_4() { return cBuiltinFunctionCallExpressionParserRuleCall_4; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBreakExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBuiltinFunctionCallExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOperationExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cForExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cGlobalVariableExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cIfExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cVariableDeclerationExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cWhileExpressionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//Expression:
		//	BreakExpression | BuiltinFunctionCallExpression | OperationExpression | ForExpression | GlobalVariableExpression |
		//	IfExpression | VariableDeclerationExpression | WhileExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//BreakExpression | BuiltinFunctionCallExpression | OperationExpression | ForExpression | GlobalVariableExpression |
		//IfExpression | VariableDeclerationExpression | WhileExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BreakExpression
		public RuleCall getBreakExpressionParserRuleCall_0() { return cBreakExpressionParserRuleCall_0; }
		
		//BuiltinFunctionCallExpression
		public RuleCall getBuiltinFunctionCallExpressionParserRuleCall_1() { return cBuiltinFunctionCallExpressionParserRuleCall_1; }
		
		//OperationExpression
		public RuleCall getOperationExpressionParserRuleCall_2() { return cOperationExpressionParserRuleCall_2; }
		
		//ForExpression
		public RuleCall getForExpressionParserRuleCall_3() { return cForExpressionParserRuleCall_3; }
		
		//GlobalVariableExpression
		public RuleCall getGlobalVariableExpressionParserRuleCall_4() { return cGlobalVariableExpressionParserRuleCall_4; }
		
		//IfExpression
		public RuleCall getIfExpressionParserRuleCall_5() { return cIfExpressionParserRuleCall_5; }
		
		//VariableDeclerationExpression
		public RuleCall getVariableDeclerationExpressionParserRuleCall_6() { return cVariableDeclerationExpressionParserRuleCall_6; }
		
		//WhileExpression
		public RuleCall getWhileExpressionParserRuleCall_7() { return cWhileExpressionParserRuleCall_7; }
	}
	public class OperationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OperationExpression");
		private final RuleCall cOperationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//OperationExpression:
		//	Operation;
		@Override public ParserRule getRule() { return rule; }
		
		//Operation
		public RuleCall getOperationParserRuleCall() { return cOperationParserRuleCall; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAtomicParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cOperatorAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cOperatorOperatorParserRuleCall_1_1_0_0 = (RuleCall)cOperatorAssignment_1_1_0.eContents().get(0);
		private final Assignment cRightAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cRightAtomicParserRuleCall_1_1_1_0 = (RuleCall)cRightAssignment_1_1_1.eContents().get(0);
		
		//Operation OperationExpression:
		//	Atomic ({Operation.left=current} (operator+=Operator right+=Atomic)*);
		@Override public ParserRule getRule() { return rule; }
		
		//Atomic ({Operation.left=current} (operator+=Operator right+=Atomic)*)
		public Group getGroup() { return cGroup; }
		
		//Atomic
		public RuleCall getAtomicParserRuleCall_0() { return cAtomicParserRuleCall_0; }
		
		//({Operation.left=current} (operator+=Operator right+=Atomic)*)
		public Group getGroup_1() { return cGroup_1; }
		
		//{Operation.left=current}
		public Action getOperationLeftAction_1_0() { return cOperationLeftAction_1_0; }
		
		//(operator+=Operator right+=Atomic)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//operator+=Operator
		public Assignment getOperatorAssignment_1_1_0() { return cOperatorAssignment_1_1_0; }
		
		//Operator
		public RuleCall getOperatorOperatorParserRuleCall_1_1_0_0() { return cOperatorOperatorParserRuleCall_1_1_0_0; }
		
		//right+=Atomic
		public Assignment getRightAssignment_1_1_1() { return cRightAssignment_1_1_1; }
		
		//Atomic
		public RuleCall getRightAtomicParserRuleCall_1_1_1_0() { return cRightAtomicParserRuleCall_1_1_1_0; }
	}
	public class ArrayDimensionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ArrayDimension");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArrayDimensionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cIndexAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cIndexVariableSymbolCrossReference_2_0_0 = (CrossReference)cIndexAssignment_2_0.eContents().get(0);
		private final RuleCall cIndexVariableSymbolIDTerminalRuleCall_2_0_0_1 = (RuleCall)cIndexVariableSymbolCrossReference_2_0_0.eContents().get(1);
		private final Assignment cSizeAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cSizeINTTerminalRuleCall_2_1_0 = (RuleCall)cSizeAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ArrayDimension:
		//	{ArrayDimension}
		//	'[' (index=[VariableSymbol] | size=INT) ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{ArrayDimension} '[' (index=[VariableSymbol] | size=INT) ']'
		public Group getGroup() { return cGroup; }
		
		//{ArrayDimension}
		public Action getArrayDimensionAction_0() { return cArrayDimensionAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//(index=[VariableSymbol] | size=INT)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//index=[VariableSymbol]
		public Assignment getIndexAssignment_2_0() { return cIndexAssignment_2_0; }
		
		//[VariableSymbol]
		public CrossReference getIndexVariableSymbolCrossReference_2_0_0() { return cIndexVariableSymbolCrossReference_2_0_0; }
		
		//ID
		public RuleCall getIndexVariableSymbolIDTerminalRuleCall_2_0_0_1() { return cIndexVariableSymbolIDTerminalRuleCall_2_0_0_1; }
		
		//size=INT
		public Assignment getSizeAssignment_2_1() { return cSizeAssignment_2_1; }
		
		//INT
		public RuleCall getSizeINTTerminalRuleCall_2_1_0() { return cSizeINTTerminalRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class VariableDeclerationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.VariableDeclerationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeVariableTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cNameAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0_0 = (RuleCall)cNameAssignment_1_1_0.eContents().get(0);
		private final Assignment cDimensionAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cDimensionArrayDimensionParserRuleCall_1_1_1_0 = (RuleCall)cDimensionAssignment_1_1_1.eContents().get(0);
		
		//VariableDeclerationExpression:
		//	type=VariableType (name=ID | name=ID dimension+=ArrayDimension+);
		@Override public ParserRule getRule() { return rule; }
		
		//type=VariableType (name=ID | name=ID dimension+=ArrayDimension+)
		public Group getGroup() { return cGroup; }
		
		//type=VariableType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//VariableType
		public RuleCall getTypeVariableTypeParserRuleCall_0_0() { return cTypeVariableTypeParserRuleCall_0_0; }
		
		//(name=ID | name=ID dimension+=ArrayDimension+)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }
		
		//name=ID dimension+=ArrayDimension+
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_1_0() { return cNameAssignment_1_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0_0() { return cNameIDTerminalRuleCall_1_1_0_0; }
		
		//dimension+=ArrayDimension+
		public Assignment getDimensionAssignment_1_1_1() { return cDimensionAssignment_1_1_1; }
		
		//ArrayDimension
		public RuleCall getDimensionArrayDimensionParserRuleCall_1_1_1_0() { return cDimensionArrayDimensionParserRuleCall_1_1_1_0; }
	}
	public class VariableSymbolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.VariableSymbol");
		private final RuleCall cVariableDeclerationExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//VariableSymbol:
		//	VariableDeclerationExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//VariableDeclerationExpression
		public RuleCall getVariableDeclerationExpressionParserRuleCall() { return cVariableDeclerationExpressionParserRuleCall; }
	}
	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntegerReferenceAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cDoubleReferenceAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueDOUBLETerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cStringReferenceAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cBooleanReferenceAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueBOOLEANTerminalRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cArrayReferenceAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cVariableReferenceAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cVariableReferenceVariableSymbolCrossReference_4_1_0 = (CrossReference)cVariableReferenceAssignment_4_1.eContents().get(0);
		private final RuleCall cVariableReferenceVariableSymbolIDTerminalRuleCall_4_1_0_1 = (RuleCall)cVariableReferenceVariableSymbolCrossReference_4_1_0.eContents().get(1);
		private final Assignment cDimensionAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cDimensionArrayDimensionParserRuleCall_4_2_0 = (RuleCall)cDimensionAssignment_4_2.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cVariableReferenceAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cVariableReferenceAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cVariableReferenceVariableSymbolCrossReference_5_1_0 = (CrossReference)cVariableReferenceAssignment_5_1.eContents().get(0);
		private final RuleCall cVariableReferenceVariableSymbolIDTerminalRuleCall_5_1_0_1 = (RuleCall)cVariableReferenceVariableSymbolCrossReference_5_1_0.eContents().get(1);
		
		//Atomic:
		//	{IntegerReference} value=INT | {DoubleReference} value=DOUBLE | {StringReference} value=STRING | {BooleanReference}
		//	value=BOOLEAN | {ArrayReference} variableReference=[VariableSymbol] dimension+=ArrayDimension+ | {VariableReference}
		//	variableReference=[VariableSymbol];
		@Override public ParserRule getRule() { return rule; }
		
		//{IntegerReference} value=INT | {DoubleReference} value=DOUBLE | {StringReference} value=STRING | {BooleanReference}
		//value=BOOLEAN | {ArrayReference} variableReference=[VariableSymbol] dimension+=ArrayDimension+ | {VariableReference}
		//variableReference=[VariableSymbol]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{IntegerReference} value=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//{IntegerReference}
		public Action getIntegerReferenceAction_0_0() { return cIntegerReferenceAction_0_0; }
		
		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }
		
		//{DoubleReference} value=DOUBLE
		public Group getGroup_1() { return cGroup_1; }
		
		//{DoubleReference}
		public Action getDoubleReferenceAction_1_0() { return cDoubleReferenceAction_1_0; }
		
		//value=DOUBLE
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//DOUBLE
		public RuleCall getValueDOUBLETerminalRuleCall_1_1_0() { return cValueDOUBLETerminalRuleCall_1_1_0; }
		
		//{StringReference} value=STRING
		public Group getGroup_2() { return cGroup_2; }
		
		//{StringReference}
		public Action getStringReferenceAction_2_0() { return cStringReferenceAction_2_0; }
		
		//value=STRING
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_1_0() { return cValueSTRINGTerminalRuleCall_2_1_0; }
		
		//{BooleanReference} value=BOOLEAN
		public Group getGroup_3() { return cGroup_3; }
		
		//{BooleanReference}
		public Action getBooleanReferenceAction_3_0() { return cBooleanReferenceAction_3_0; }
		
		//value=BOOLEAN
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//BOOLEAN
		public RuleCall getValueBOOLEANTerminalRuleCall_3_1_0() { return cValueBOOLEANTerminalRuleCall_3_1_0; }
		
		//{ArrayReference} variableReference=[VariableSymbol] dimension+=ArrayDimension+
		public Group getGroup_4() { return cGroup_4; }
		
		//{ArrayReference}
		public Action getArrayReferenceAction_4_0() { return cArrayReferenceAction_4_0; }
		
		//variableReference=[VariableSymbol]
		public Assignment getVariableReferenceAssignment_4_1() { return cVariableReferenceAssignment_4_1; }
		
		//[VariableSymbol]
		public CrossReference getVariableReferenceVariableSymbolCrossReference_4_1_0() { return cVariableReferenceVariableSymbolCrossReference_4_1_0; }
		
		//ID
		public RuleCall getVariableReferenceVariableSymbolIDTerminalRuleCall_4_1_0_1() { return cVariableReferenceVariableSymbolIDTerminalRuleCall_4_1_0_1; }
		
		//dimension+=ArrayDimension+
		public Assignment getDimensionAssignment_4_2() { return cDimensionAssignment_4_2; }
		
		//ArrayDimension
		public RuleCall getDimensionArrayDimensionParserRuleCall_4_2_0() { return cDimensionArrayDimensionParserRuleCall_4_2_0; }
		
		//{VariableReference} variableReference=[VariableSymbol]
		public Group getGroup_5() { return cGroup_5; }
		
		//{VariableReference}
		public Action getVariableReferenceAction_5_0() { return cVariableReferenceAction_5_0; }
		
		//variableReference=[VariableSymbol]
		public Assignment getVariableReferenceAssignment_5_1() { return cVariableReferenceAssignment_5_1; }
		
		//[VariableSymbol]
		public CrossReference getVariableReferenceVariableSymbolCrossReference_5_1_0() { return cVariableReferenceVariableSymbolCrossReference_5_1_0; }
		
		//ID
		public RuleCall getVariableReferenceVariableSymbolIDTerminalRuleCall_5_1_0_1() { return cVariableReferenceVariableSymbolIDTerminalRuleCall_5_1_0_1; }
	}
	
	
	private final InkAppElements pInkApp;
	private final OperatorElements pOperator;
	private final BuiltinFunctionsElements pBuiltinFunctions;
	private final BreakExpressionElements pBreakExpression;
	private final TerminalRule tDOUBLE;
	private final TerminalRule tBOOLEAN;
	private final VariableTypeElements pVariableType;
	private final GlobalVariableExpressionElements pGlobalVariableExpression;
	private final EntryTaskElements pEntryTask;
	private final TaskElements pTask;
	private final IfExpressionElements pIfExpression;
	private final ForExpressionElements pForExpression;
	private final WhileExpressionElements pWhileExpression;
	private final BuiltinFunctionCallExpressionElements pBuiltinFunctionCallExpression;
	private final TaskBodyElements pTaskBody;
	private final StatementBodyElements pStatementBody;
	private final BlockExpressionsElements pBlockExpressions;
	private final ExpressionElements pExpression;
	private final OperationExpressionElements pOperationExpression;
	private final OperationElements pOperation;
	private final ArrayDimensionElements pArrayDimension;
	private final VariableDeclerationExpressionElements pVariableDeclerationExpression;
	private final VariableSymbolElements pVariableSymbol;
	private final AtomicElements pAtomic;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pInkApp = new InkAppElements();
		this.pOperator = new OperatorElements();
		this.pBuiltinFunctions = new BuiltinFunctionsElements();
		this.pBreakExpression = new BreakExpressionElements();
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DOUBLE");
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BOOLEAN");
		this.pVariableType = new VariableTypeElements();
		this.pGlobalVariableExpression = new GlobalVariableExpressionElements();
		this.pEntryTask = new EntryTaskElements();
		this.pTask = new TaskElements();
		this.pIfExpression = new IfExpressionElements();
		this.pForExpression = new ForExpressionElements();
		this.pWhileExpression = new WhileExpressionElements();
		this.pBuiltinFunctionCallExpression = new BuiltinFunctionCallExpressionElements();
		this.pTaskBody = new TaskBodyElements();
		this.pStatementBody = new StatementBodyElements();
		this.pBlockExpressions = new BlockExpressionsElements();
		this.pExpression = new ExpressionElements();
		this.pOperationExpression = new OperationExpressionElements();
		this.pOperation = new OperationElements();
		this.pArrayDimension = new ArrayDimensionElements();
		this.pVariableDeclerationExpression = new VariableDeclerationExpressionElements();
		this.pVariableSymbol = new VariableSymbolElements();
		this.pAtomic = new AtomicElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//InkApp:
	//	globals+=GlobalVariableExpression*
	//	tasks+=Task*
	//	entry=EntryTask;
	public InkAppElements getInkAppAccess() {
		return pInkApp;
	}
	
	public ParserRule getInkAppRule() {
		return getInkAppAccess().getRule();
	}
	
	//Operator:
	//	'-' | '+' | '/' | '*' | '>=' | '<=' | '==' | '!=' | '<' | '>' | '=' | 'AND' | 'OR';
	public OperatorElements getOperatorAccess() {
		return pOperator;
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}
	
	//BuiltinFunctions:
	//	'print';
	public BuiltinFunctionsElements getBuiltinFunctionsAccess() {
		return pBuiltinFunctions;
	}
	
	public ParserRule getBuiltinFunctionsRule() {
		return getBuiltinFunctionsAccess().getRule();
	}
	
	//BreakExpression:
	//	{BreakExpression} break='break';
	public BreakExpressionElements getBreakExpressionAccess() {
		return pBreakExpression;
	}
	
	public ParserRule getBreakExpressionRule() {
		return getBreakExpressionAccess().getRule();
	}
	
	//terminal DOUBLE returns ecore::EDouble:
	//	INT '.' INT;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//terminal BOOLEAN returns ecore::EBoolean:
	//	'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//VariableType:
	//	{VariableType} type=('string' | 'integer' | 'boolean');
	public VariableTypeElements getVariableTypeAccess() {
		return pVariableType;
	}
	
	public ParserRule getVariableTypeRule() {
		return getVariableTypeAccess().getRule();
	}
	
	//GlobalVariableExpression:
	//	{GlobalVariableExpression}
	//	'GLOBAL' variable=VariableDeclerationExpression;
	public GlobalVariableExpressionElements getGlobalVariableExpressionAccess() {
		return pGlobalVariableExpression;
	}
	
	public ParserRule getGlobalVariableExpressionRule() {
		return getGlobalVariableExpressionAccess().getRule();
	}
	
	////ConstantVariableExpression:
	////	{ConstantVariableExpression}
	////	'CONSTANT' variable = VariableDeclerationExpression
	////;
	////Main:
	////	{Main}
	////	variableDeclerations += VariableDecleration*
	////	body += Expression*
	////;
	////
	////FunctionBody:
	////	{FunctionBody}
	////	variableDeclerations += VariableDecleration* 
	////	body += Expression*
	////;
	//EntryTask:
	//	'entry' task=Task;
	public EntryTaskElements getEntryTaskAccess() {
		return pEntryTask;
	}
	
	public ParserRule getEntryTaskRule() {
		return getEntryTaskAccess().getRule();
	}
	
	//Task:
	//	{Task}
	//	'task' name=ID '{'
	//	taskbody=TaskBody
	//	'}';
	public TaskElements getTaskAccess() {
		return pTask;
	}
	
	public ParserRule getTaskRule() {
		return getTaskAccess().getRule();
	}
	
	//IfExpression:
	//	{IfExpression}
	//	'if' '(' ifcondition=OperationExpression ')' '{'
	//	ifbody=StatementBody
	//	'}' ('else' 'if' '(' elseifcondition+=OperationExpression ')' '{'
	//	elseifbody+=StatementBody
	//	'}')* ('else' '{'
	//	elsebody=StatementBody
	//	'}')?;
	public IfExpressionElements getIfExpressionAccess() {
		return pIfExpression;
	}
	
	public ParserRule getIfExpressionRule() {
		return getIfExpressionAccess().getRule();
	}
	
	//ForExpression:
	//	{ForExpression}
	//	'for' '(' initial=OperationExpression ';' test=OperationExpression ';' update=OperationExpression ')' '{'
	//	body=StatementBody
	//	'}';
	public ForExpressionElements getForExpressionAccess() {
		return pForExpression;
	}
	
	public ParserRule getForExpressionRule() {
		return getForExpressionAccess().getRule();
	}
	
	//WhileExpression:
	//	{WhileExpression}
	//	'while' '(' test=OperationExpression ')' '{'
	//	body=StatementBody
	//	'}';
	public WhileExpressionElements getWhileExpressionAccess() {
		return pWhileExpression;
	}
	
	public ParserRule getWhileExpressionRule() {
		return getWhileExpressionAccess().getRule();
	}
	
	//BuiltinFunctionCallExpression:
	//	{BuiltinFunctionCallExpression} function=BuiltinFunctions '(' (parameters+=Atomic (',' parameters+=Atomic)*)? ')';
	public BuiltinFunctionCallExpressionElements getBuiltinFunctionCallExpressionAccess() {
		return pBuiltinFunctionCallExpression;
	}
	
	public ParserRule getBuiltinFunctionCallExpressionRule() {
		return getBuiltinFunctionCallExpressionAccess().getRule();
	}
	
	////AbstractFunctionCall:
	////	FunctionCall | 
	////	BuiltinFunctionCallExpression
	////;
	//TaskBody:
	//	{TaskBody} body+=VariableDeclerationExpression*
	//	body+=BlockExpressions* ('next' nexttask=[Task] | endtask='end');
	public TaskBodyElements getTaskBodyAccess() {
		return pTaskBody;
	}
	
	public ParserRule getTaskBodyRule() {
		return getTaskBodyAccess().getRule();
	}
	
	//StatementBody:
	//	{StatementBody} body+=BlockExpressions*
	//	body+=BreakExpression?;
	public StatementBodyElements getStatementBodyAccess() {
		return pStatementBody;
	}
	
	public ParserRule getStatementBodyRule() {
		return getStatementBodyAccess().getRule();
	}
	
	//BlockExpressions:
	//	OperationExpression | IfExpression | ForExpression | WhileExpression | BuiltinFunctionCallExpression;
	public BlockExpressionsElements getBlockExpressionsAccess() {
		return pBlockExpressions;
	}
	
	public ParserRule getBlockExpressionsRule() {
		return getBlockExpressionsAccess().getRule();
	}
	
	//Expression:
	//	BreakExpression | BuiltinFunctionCallExpression | OperationExpression | ForExpression | GlobalVariableExpression |
	//	IfExpression | VariableDeclerationExpression | WhileExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//OperationExpression:
	//	Operation;
	public OperationExpressionElements getOperationExpressionAccess() {
		return pOperationExpression;
	}
	
	public ParserRule getOperationExpressionRule() {
		return getOperationExpressionAccess().getRule();
	}
	
	//Operation OperationExpression:
	//	Atomic ({Operation.left=current} (operator+=Operator right+=Atomic)*);
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//ArrayDimension:
	//	{ArrayDimension}
	//	'[' (index=[VariableSymbol] | size=INT) ']';
	public ArrayDimensionElements getArrayDimensionAccess() {
		return pArrayDimension;
	}
	
	public ParserRule getArrayDimensionRule() {
		return getArrayDimensionAccess().getRule();
	}
	
	//VariableDeclerationExpression:
	//	type=VariableType (name=ID | name=ID dimension+=ArrayDimension+);
	public VariableDeclerationExpressionElements getVariableDeclerationExpressionAccess() {
		return pVariableDeclerationExpression;
	}
	
	public ParserRule getVariableDeclerationExpressionRule() {
		return getVariableDeclerationExpressionAccess().getRule();
	}
	
	//VariableSymbol:
	//	VariableDeclerationExpression;
	public VariableSymbolElements getVariableSymbolAccess() {
		return pVariableSymbol;
	}
	
	public ParserRule getVariableSymbolRule() {
		return getVariableSymbolAccess().getRule();
	}
	
	//Atomic:
	//	{IntegerReference} value=INT | {DoubleReference} value=DOUBLE | {StringReference} value=STRING | {BooleanReference}
	//	value=BOOLEAN | {ArrayReference} variableReference=[VariableSymbol] dimension+=ArrayDimension+ | {VariableReference}
	//	variableReference=[VariableSymbol];
	public AtomicElements getAtomicAccess() {
		return pAtomic;
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
