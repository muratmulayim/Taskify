/*
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class InkAppElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.InkApp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGlobalsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cGlobalsGlobalVariableParserRuleCall_0_0 = (RuleCall)cGlobalsAssignment_0.eContents().get(0);
		private final Assignment cTasksAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTasksTaskParserRuleCall_1_0 = (RuleCall)cTasksAssignment_1.eContents().get(0);
		private final Assignment cEntryAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEntryEntryTaskParserRuleCall_2_0 = (RuleCall)cEntryAssignment_2.eContents().get(0);
		
		//InkApp:
		//	globals+=GlobalVariable*
		//	tasks+=Task*
		//	entry=EntryTask;
		@Override public ParserRule getRule() { return rule; }
		
		//globals+=GlobalVariable* tasks+=Task* entry=EntryTask
		public Group getGroup() { return cGroup; }
		
		//globals+=GlobalVariable*
		public Assignment getGlobalsAssignment_0() { return cGlobalsAssignment_0; }
		
		//GlobalVariable
		public RuleCall getGlobalsGlobalVariableParserRuleCall_0_0() { return cGlobalsGlobalVariableParserRuleCall_0_0; }
		
		//tasks+=Task*
		public Assignment getTasksAssignment_1() { return cTasksAssignment_1; }
		
		//Task
		public RuleCall getTasksTaskParserRuleCall_1_0() { return cTasksTaskParserRuleCall_1_0; }
		
		//entry=EntryTask
		public Assignment getEntryAssignment_2() { return cEntryAssignment_2; }
		
		//EntryTask
		public RuleCall getEntryEntryTaskParserRuleCall_2_0() { return cEntryEntryTaskParserRuleCall_2_0; }
	}
	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPlusSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSolidusKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cAsteriskKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cLessThanSignEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cEqualsSignEqualsSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cExclamationMarkEqualsSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cLessThanSignKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cGreaterThanSignKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cEqualsSignKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cANDKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cORKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		
		//Operator:
		//	'-' | '+' | '/' | '*' | '>=' | '<=' | '==' | '!=' | '<' | '>' | '=' | 'AND' | 'OR';
		@Override public ParserRule getRule() { return rule; }
		
		//'-' | '+' | '/' | '*' | '>=' | '<=' | '==' | '!=' | '<' | '>' | '=' | 'AND' | 'OR'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1() { return cPlusSignKeyword_1; }
		
		//'/'
		public Keyword getSolidusKeyword_2() { return cSolidusKeyword_2; }
		
		//'*'
		public Keyword getAsteriskKeyword_3() { return cAsteriskKeyword_3; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_4() { return cGreaterThanSignEqualsSignKeyword_4; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_5() { return cLessThanSignEqualsSignKeyword_5; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_6() { return cEqualsSignEqualsSignKeyword_6; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_7() { return cExclamationMarkEqualsSignKeyword_7; }
		
		//'<'
		public Keyword getLessThanSignKeyword_8() { return cLessThanSignKeyword_8; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_9() { return cGreaterThanSignKeyword_9; }
		
		//'='
		public Keyword getEqualsSignKeyword_10() { return cEqualsSignKeyword_10; }
		
		//'AND'
		public Keyword getANDKeyword_11() { return cANDKeyword_11; }
		
		//'OR'
		public Keyword getORKeyword_12() { return cORKeyword_12; }
	}
	public class BuiltinFunctionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BuiltinFunctions");
		private final Keyword cPrintKeyword = (Keyword)rule.eContents().get(1);
		
		//BuiltinFunctions:
		//	'print';
		@Override public ParserRule getRule() { return rule; }
		
		//'print'
		public Keyword getPrintKeyword() { return cPrintKeyword; }
	}
	public class BreakElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Break");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBreakAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cBreakAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cBreakBreakKeyword_1_0 = (Keyword)cBreakAssignment_1.eContents().get(0);
		
		//Break:
		//	{Break} break='break';
		@Override public ParserRule getRule() { return rule; }
		
		//{Break} break='break'
		public Group getGroup() { return cGroup; }
		
		//{Break}
		public Action getBreakAction_0() { return cBreakAction_0; }
		
		//break='break'
		public Assignment getBreakAssignment_1() { return cBreakAssignment_1; }
		
		//'break'
		public Keyword getBreakBreakKeyword_1_0() { return cBreakBreakKeyword_1_0; }
	}
	public class VariableTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.VariableType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cVariableTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cStringKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cVariableTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cIntegerKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cVariableTypeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cBooleanKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//VariableType:
		//	{VariableType} 'string' | {VariableType} 'integer' | {VariableType} 'boolean';
		@Override public ParserRule getRule() { return rule; }
		
		//{VariableType} 'string' | {VariableType} 'integer' | {VariableType} 'boolean'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{VariableType} 'string'
		public Group getGroup_0() { return cGroup_0; }
		
		//{VariableType}
		public Action getVariableTypeAction_0_0() { return cVariableTypeAction_0_0; }
		
		//'string'
		public Keyword getStringKeyword_0_1() { return cStringKeyword_0_1; }
		
		//{VariableType} 'integer'
		public Group getGroup_1() { return cGroup_1; }
		
		//{VariableType}
		public Action getVariableTypeAction_1_0() { return cVariableTypeAction_1_0; }
		
		//'integer'
		public Keyword getIntegerKeyword_1_1() { return cIntegerKeyword_1_1; }
		
		//{VariableType} 'boolean'
		public Group getGroup_2() { return cGroup_2; }
		
		//{VariableType}
		public Action getVariableTypeAction_2_0() { return cVariableTypeAction_2_0; }
		
		//'boolean'
		public Keyword getBooleanKeyword_2_1() { return cBooleanKeyword_2_1; }
	}
	public class GlobalVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.GlobalVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGlobalVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGLOBALKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableVariableDeclerationParserRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		
		//GlobalVariable:
		//	{GlobalVariable}
		//	'GLOBAL' variable=VariableDecleration;
		@Override public ParserRule getRule() { return rule; }
		
		//{GlobalVariable} 'GLOBAL' variable=VariableDecleration
		public Group getGroup() { return cGroup; }
		
		//{GlobalVariable}
		public Action getGlobalVariableAction_0() { return cGlobalVariableAction_0; }
		
		//'GLOBAL'
		public Keyword getGLOBALKeyword_1() { return cGLOBALKeyword_1; }
		
		//variable=VariableDecleration
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }
		
		//VariableDecleration
		public RuleCall getVariableVariableDeclerationParserRuleCall_2_0() { return cVariableVariableDeclerationParserRuleCall_2_0; }
	}
	public class MainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Main");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMainAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVariableDeclerationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableDeclerationsVariableDeclerationParserRuleCall_1_0 = (RuleCall)cVariableDeclerationsAssignment_1.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyExpressionParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//Main:
		//	{Main} variableDeclerations+=VariableDecleration*
		//	body+=Expression*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Main} variableDeclerations+=VariableDecleration* body+=Expression*
		public Group getGroup() { return cGroup; }
		
		//{Main}
		public Action getMainAction_0() { return cMainAction_0; }
		
		//variableDeclerations+=VariableDecleration*
		public Assignment getVariableDeclerationsAssignment_1() { return cVariableDeclerationsAssignment_1; }
		
		//VariableDecleration
		public RuleCall getVariableDeclerationsVariableDeclerationParserRuleCall_1_0() { return cVariableDeclerationsVariableDeclerationParserRuleCall_1_0; }
		
		//body+=Expression*
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//Expression
		public RuleCall getBodyExpressionParserRuleCall_2_0() { return cBodyExpressionParserRuleCall_2_0; }
	}
	public class FunctionBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FunctionBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVariableDeclerationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableDeclerationsVariableDeclerationParserRuleCall_1_0 = (RuleCall)cVariableDeclerationsAssignment_1.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyExpressionParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//FunctionBody:
		//	{FunctionBody} variableDeclerations+=VariableDecleration*
		//	body+=Expression*;
		@Override public ParserRule getRule() { return rule; }
		
		//{FunctionBody} variableDeclerations+=VariableDecleration* body+=Expression*
		public Group getGroup() { return cGroup; }
		
		//{FunctionBody}
		public Action getFunctionBodyAction_0() { return cFunctionBodyAction_0; }
		
		//variableDeclerations+=VariableDecleration*
		public Assignment getVariableDeclerationsAssignment_1() { return cVariableDeclerationsAssignment_1; }
		
		//VariableDecleration
		public RuleCall getVariableDeclerationsVariableDeclerationParserRuleCall_1_0() { return cVariableDeclerationsVariableDeclerationParserRuleCall_1_0; }
		
		//body+=Expression*
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//Expression
		public RuleCall getBodyExpressionParserRuleCall_2_0() { return cBodyExpressionParserRuleCall_2_0; }
	}
	public class EntryTaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EntryTask");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTaskAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTaskTaskParserRuleCall_1_0 = (RuleCall)cTaskAssignment_1.eContents().get(0);
		
		//EntryTask:
		//	'entry' task=Task;
		@Override public ParserRule getRule() { return rule; }
		
		//'entry' task=Task
		public Group getGroup() { return cGroup; }
		
		//'entry'
		public Keyword getEntryKeyword_0() { return cEntryKeyword_0; }
		
		//task=Task
		public Assignment getTaskAssignment_1() { return cTaskAssignment_1; }
		
		//Task
		public RuleCall getTaskTaskParserRuleCall_1_0() { return cTaskTaskParserRuleCall_1_0; }
	}
	public class TaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Task");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyVariableDeclerationParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyExpressionParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cNextKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Assignment cTaskAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final CrossReference cTaskTaskCrossReference_5_0_1_0 = (CrossReference)cTaskAssignment_5_0_1.eContents().get(0);
		private final RuleCall cTaskTaskIDTerminalRuleCall_5_0_1_0_1 = (RuleCall)cTaskTaskCrossReference_5_0_1_0.eContents().get(1);
		private final Keyword cEndKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Task:
		//	'task' name=ID '{'
		//	body+=VariableDecleration*
		//	body+=Expression* ('next' task=[Task] | 'end')
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'task' name=ID '{' body+=VariableDecleration* body+=Expression* ('next' task=[Task] | 'end') '}'
		public Group getGroup() { return cGroup; }
		
		//'task'
		public Keyword getTaskKeyword_0() { return cTaskKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//body+=VariableDecleration*
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }
		
		//VariableDecleration
		public RuleCall getBodyVariableDeclerationParserRuleCall_3_0() { return cBodyVariableDeclerationParserRuleCall_3_0; }
		
		//body+=Expression*
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }
		
		//Expression
		public RuleCall getBodyExpressionParserRuleCall_4_0() { return cBodyExpressionParserRuleCall_4_0; }
		
		//('next' task=[Task] | 'end')
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//'next' task=[Task]
		public Group getGroup_5_0() { return cGroup_5_0; }
		
		//'next'
		public Keyword getNextKeyword_5_0_0() { return cNextKeyword_5_0_0; }
		
		//task=[Task]
		public Assignment getTaskAssignment_5_0_1() { return cTaskAssignment_5_0_1; }
		
		//[Task]
		public CrossReference getTaskTaskCrossReference_5_0_1_0() { return cTaskTaskCrossReference_5_0_1_0; }
		
		//ID
		public RuleCall getTaskTaskIDTerminalRuleCall_5_0_1_0_1() { return cTaskTaskIDTerminalRuleCall_5_0_1_0_1; }
		
		//'end'
		public Keyword getEndKeyword_5_1() { return cEndKeyword_5_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class IfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.IfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIfconditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIfconditionOperationExpressionParserRuleCall_2_0 = (RuleCall)cIfconditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cIfbodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIfbodyExpressionParserRuleCall_5_0 = (RuleCall)cIfbodyAssignment_5.eContents().get(0);
		private final Assignment cIfbodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cIfbodyBreakParserRuleCall_6_0 = (RuleCall)cIfbodyAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cElseKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cIfKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Assignment cElseconditionAssignment_8_3 = (Assignment)cGroup_8.eContents().get(3);
		private final RuleCall cElseconditionOperationExpressionParserRuleCall_8_3_0 = (RuleCall)cElseconditionAssignment_8_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8_4 = (Keyword)cGroup_8.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_8_5 = (Keyword)cGroup_8.eContents().get(5);
		private final Assignment cElseifbodyAssignment_8_6 = (Assignment)cGroup_8.eContents().get(6);
		private final RuleCall cElseifbodyExpressionParserRuleCall_8_6_0 = (RuleCall)cElseifbodyAssignment_8_6.eContents().get(0);
		private final Assignment cElseifbodyAssignment_8_7 = (Assignment)cGroup_8.eContents().get(7);
		private final RuleCall cElseifbodyBreakParserRuleCall_8_7_0 = (RuleCall)cElseifbodyAssignment_8_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_8 = (Keyword)cGroup_8.eContents().get(8);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cElseKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cElsebodyAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cElsebodyExpressionParserRuleCall_9_2_0 = (RuleCall)cElsebodyAssignment_9_2.eContents().get(0);
		private final Assignment cElseifbodyAssignment_9_3 = (Assignment)cGroup_9.eContents().get(3);
		private final RuleCall cElseifbodyBreakParserRuleCall_9_3_0 = (RuleCall)cElseifbodyAssignment_9_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9_4 = (Keyword)cGroup_9.eContents().get(4);
		
		//IfExpression:
		//	'if' '(' ifcondition=OperationExpression ')' '{'
		//	ifbody+=Expression*
		//	ifbody+=Break?
		//	'}' ('else' 'if' '(' elsecondition+=OperationExpression ')' '{'
		//	elseifbody+=Expression*
		//	elseifbody+=Break?
		//	'}')* ('else' '{'
		//	elsebody+=Expression*
		//	elseifbody+=Break?
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' ifcondition=OperationExpression ')' '{' ifbody+=Expression* ifbody+=Break? '}' ('else' 'if' '('
		//elsecondition+=OperationExpression ')' '{' elseifbody+=Expression* elseifbody+=Break? '}')* ('else' '{'
		//elsebody+=Expression* elseifbody+=Break? '}')?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//ifcondition=OperationExpression
		public Assignment getIfconditionAssignment_2() { return cIfconditionAssignment_2; }
		
		//OperationExpression
		public RuleCall getIfconditionOperationExpressionParserRuleCall_2_0() { return cIfconditionOperationExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//ifbody+=Expression*
		public Assignment getIfbodyAssignment_5() { return cIfbodyAssignment_5; }
		
		//Expression
		public RuleCall getIfbodyExpressionParserRuleCall_5_0() { return cIfbodyExpressionParserRuleCall_5_0; }
		
		//ifbody+=Break?
		public Assignment getIfbodyAssignment_6() { return cIfbodyAssignment_6; }
		
		//Break
		public RuleCall getIfbodyBreakParserRuleCall_6_0() { return cIfbodyBreakParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
		
		//('else' 'if' '(' elsecondition+=OperationExpression ')' '{' elseifbody+=Expression* elseifbody+=Break? '}')*
		public Group getGroup_8() { return cGroup_8; }
		
		//'else'
		public Keyword getElseKeyword_8_0() { return cElseKeyword_8_0; }
		
		//'if'
		public Keyword getIfKeyword_8_1() { return cIfKeyword_8_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_8_2() { return cLeftParenthesisKeyword_8_2; }
		
		//elsecondition+=OperationExpression
		public Assignment getElseconditionAssignment_8_3() { return cElseconditionAssignment_8_3; }
		
		//OperationExpression
		public RuleCall getElseconditionOperationExpressionParserRuleCall_8_3_0() { return cElseconditionOperationExpressionParserRuleCall_8_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8_4() { return cRightParenthesisKeyword_8_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_5() { return cLeftCurlyBracketKeyword_8_5; }
		
		//elseifbody+=Expression*
		public Assignment getElseifbodyAssignment_8_6() { return cElseifbodyAssignment_8_6; }
		
		//Expression
		public RuleCall getElseifbodyExpressionParserRuleCall_8_6_0() { return cElseifbodyExpressionParserRuleCall_8_6_0; }
		
		//elseifbody+=Break?
		public Assignment getElseifbodyAssignment_8_7() { return cElseifbodyAssignment_8_7; }
		
		//Break
		public RuleCall getElseifbodyBreakParserRuleCall_8_7_0() { return cElseifbodyBreakParserRuleCall_8_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_8() { return cRightCurlyBracketKeyword_8_8; }
		
		//('else' '{' elsebody+=Expression* elseifbody+=Break? '}')?
		public Group getGroup_9() { return cGroup_9; }
		
		//'else'
		public Keyword getElseKeyword_9_0() { return cElseKeyword_9_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_9_1() { return cLeftCurlyBracketKeyword_9_1; }
		
		//elsebody+=Expression*
		public Assignment getElsebodyAssignment_9_2() { return cElsebodyAssignment_9_2; }
		
		//Expression
		public RuleCall getElsebodyExpressionParserRuleCall_9_2_0() { return cElsebodyExpressionParserRuleCall_9_2_0; }
		
		//elseifbody+=Break?
		public Assignment getElseifbodyAssignment_9_3() { return cElseifbodyAssignment_9_3; }
		
		//Break
		public RuleCall getElseifbodyBreakParserRuleCall_9_3_0() { return cElseifbodyBreakParserRuleCall_9_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9_4() { return cRightCurlyBracketKeyword_9_4; }
	}
	public class ForExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ForExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInitialAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitialOperationExpressionParserRuleCall_2_0 = (RuleCall)cInitialAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTestAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTestOperationExpressionParserRuleCall_4_0 = (RuleCall)cTestAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cUpdateAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cUpdateOperationExpressionParserRuleCall_6_0 = (RuleCall)cUpdateAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cBodyAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cBodyExpressionParserRuleCall_9_0 = (RuleCall)cBodyAssignment_9.eContents().get(0);
		private final Assignment cBodyAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cBodyBreakParserRuleCall_10_0 = (RuleCall)cBodyAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//ForExpression:
		//	'for' '(' initial=OperationExpression ';' test=OperationExpression ';' update=OperationExpression ')' '{'
		//	body+=Expression*
		//	body+=Break?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'for' '(' initial=OperationExpression ';' test=OperationExpression ';' update=OperationExpression ')' '{'
		//body+=Expression* body+=Break? '}'
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//initial=OperationExpression
		public Assignment getInitialAssignment_2() { return cInitialAssignment_2; }
		
		//OperationExpression
		public RuleCall getInitialOperationExpressionParserRuleCall_2_0() { return cInitialOperationExpressionParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//test=OperationExpression
		public Assignment getTestAssignment_4() { return cTestAssignment_4; }
		
		//OperationExpression
		public RuleCall getTestOperationExpressionParserRuleCall_4_0() { return cTestOperationExpressionParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
		
		//update=OperationExpression
		public Assignment getUpdateAssignment_6() { return cUpdateAssignment_6; }
		
		//OperationExpression
		public RuleCall getUpdateOperationExpressionParserRuleCall_6_0() { return cUpdateOperationExpressionParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }
		
		//body+=Expression*
		public Assignment getBodyAssignment_9() { return cBodyAssignment_9; }
		
		//Expression
		public RuleCall getBodyExpressionParserRuleCall_9_0() { return cBodyExpressionParserRuleCall_9_0; }
		
		//body+=Break?
		public Assignment getBodyAssignment_10() { return cBodyAssignment_10; }
		
		//Break
		public RuleCall getBodyBreakParserRuleCall_10_0() { return cBodyBreakParserRuleCall_10_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class WhileExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.WhileExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTestAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTestOperationExpressionParserRuleCall_2_0 = (RuleCall)cTestAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyExpressionParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyBreakParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//WhileExpression:
		//	'while' '(' test=OperationExpression ')' '{'
		//	body+=Expression*
		//	body+=Break?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'while' '(' test=OperationExpression ')' '{' body+=Expression* body+=Break? '}'
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//test=OperationExpression
		public Assignment getTestAssignment_2() { return cTestAssignment_2; }
		
		//OperationExpression
		public RuleCall getTestOperationExpressionParserRuleCall_2_0() { return cTestOperationExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//body+=Expression*
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }
		
		//Expression
		public RuleCall getBodyExpressionParserRuleCall_5_0() { return cBodyExpressionParserRuleCall_5_0; }
		
		//body+=Break?
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }
		
		//Break
		public RuleCall getBodyBreakParserRuleCall_6_0() { return cBodyBreakParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOperationExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cForExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWhileExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBuiltinFunctionCallParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Expression:
		//	OperationExpression | IfExpression | ForExpression | WhileExpression | BuiltinFunctionCall;
		@Override public ParserRule getRule() { return rule; }
		
		//OperationExpression | IfExpression | ForExpression | WhileExpression | BuiltinFunctionCall
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OperationExpression
		public RuleCall getOperationExpressionParserRuleCall_0() { return cOperationExpressionParserRuleCall_0; }
		
		//IfExpression
		public RuleCall getIfExpressionParserRuleCall_1() { return cIfExpressionParserRuleCall_1; }
		
		//ForExpression
		public RuleCall getForExpressionParserRuleCall_2() { return cForExpressionParserRuleCall_2; }
		
		//WhileExpression
		public RuleCall getWhileExpressionParserRuleCall_3() { return cWhileExpressionParserRuleCall_3; }
		
		//BuiltinFunctionCall
		public RuleCall getBuiltinFunctionCallParserRuleCall_4() { return cBuiltinFunctionCallParserRuleCall_4; }
	}
	public class OperationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OperationExpression");
		private final RuleCall cOperationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////Expression:
		////	{Expression} 
		////	exp += OperationExpression*
		////	exp += IfExpression*
		////	exp += ForExpression*
		////	exp += WhileExpression*
		////;
		////BlockBody:
		////	{BlockBody} 
		////	expression += Expression*
		////;
		//OperationExpression:
		//	Operation;
		@Override public ParserRule getRule() { return rule; }
		
		//Operation
		public RuleCall getOperationParserRuleCall() { return cOperationParserRuleCall; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAtomicParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cOperatorAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cOperatorOperatorParserRuleCall_1_1_0_0 = (RuleCall)cOperatorAssignment_1_1_0.eContents().get(0);
		private final Assignment cRightAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cRightAtomicOrFunctionCallParserRuleCall_1_1_1_0 = (RuleCall)cRightAssignment_1_1_1.eContents().get(0);
		
		//Operation OperationExpression:
		//	Atomic ({Operation.left=current} (operator+=Operator right+=AtomicOrFunctionCall)*);
		@Override public ParserRule getRule() { return rule; }
		
		//Atomic ({Operation.left=current} (operator+=Operator right+=AtomicOrFunctionCall)*)
		public Group getGroup() { return cGroup; }
		
		//Atomic
		public RuleCall getAtomicParserRuleCall_0() { return cAtomicParserRuleCall_0; }
		
		//({Operation.left=current} (operator+=Operator right+=AtomicOrFunctionCall)*)
		public Group getGroup_1() { return cGroup_1; }
		
		//{Operation.left=current}
		public Action getOperationLeftAction_1_0() { return cOperationLeftAction_1_0; }
		
		//(operator+=Operator right+=AtomicOrFunctionCall)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//operator+=Operator
		public Assignment getOperatorAssignment_1_1_0() { return cOperatorAssignment_1_1_0; }
		
		//Operator
		public RuleCall getOperatorOperatorParserRuleCall_1_1_0_0() { return cOperatorOperatorParserRuleCall_1_1_0_0; }
		
		//right+=AtomicOrFunctionCall
		public Assignment getRightAssignment_1_1_1() { return cRightAssignment_1_1_1; }
		
		//AtomicOrFunctionCall
		public RuleCall getRightAtomicOrFunctionCallParserRuleCall_1_1_1_0() { return cRightAtomicOrFunctionCallParserRuleCall_1_1_1_0; }
	}
	public class ArrayDimensionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ArrayDimension");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArrayDimensionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cIndexAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cIndexVariableSymbolCrossReference_2_0_0 = (CrossReference)cIndexAssignment_2_0.eContents().get(0);
		private final RuleCall cIndexVariableSymbolIDTerminalRuleCall_2_0_0_1 = (RuleCall)cIndexVariableSymbolCrossReference_2_0_0.eContents().get(1);
		private final Assignment cSizeAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cSizeINTTerminalRuleCall_2_1_0 = (RuleCall)cSizeAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ArrayDimension:
		//	{ArrayDimension}
		//	'[' (index=[VariableSymbol] | size=INT) ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{ArrayDimension} '[' (index=[VariableSymbol] | size=INT) ']'
		public Group getGroup() { return cGroup; }
		
		//{ArrayDimension}
		public Action getArrayDimensionAction_0() { return cArrayDimensionAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//(index=[VariableSymbol] | size=INT)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//index=[VariableSymbol]
		public Assignment getIndexAssignment_2_0() { return cIndexAssignment_2_0; }
		
		//[VariableSymbol]
		public CrossReference getIndexVariableSymbolCrossReference_2_0_0() { return cIndexVariableSymbolCrossReference_2_0_0; }
		
		//ID
		public RuleCall getIndexVariableSymbolIDTerminalRuleCall_2_0_0_1() { return cIndexVariableSymbolIDTerminalRuleCall_2_0_0_1; }
		
		//size=INT
		public Assignment getSizeAssignment_2_1() { return cSizeAssignment_2_1; }
		
		//INT
		public RuleCall getSizeINTTerminalRuleCall_2_1_0() { return cSizeINTTerminalRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class VariableDeclerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.VariableDecleration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeVariableTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cNameAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0_0 = (RuleCall)cNameAssignment_1_1_0.eContents().get(0);
		private final Assignment cDimensionAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cDimensionArrayDimensionParserRuleCall_1_1_1_0 = (RuleCall)cDimensionAssignment_1_1_1.eContents().get(0);
		
		//VariableDecleration:
		//	type=VariableType (name=ID | name=ID dimension+=ArrayDimension+);
		@Override public ParserRule getRule() { return rule; }
		
		//type=VariableType (name=ID | name=ID dimension+=ArrayDimension+)
		public Group getGroup() { return cGroup; }
		
		//type=VariableType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//VariableType
		public RuleCall getTypeVariableTypeParserRuleCall_0_0() { return cTypeVariableTypeParserRuleCall_0_0; }
		
		//(name=ID | name=ID dimension+=ArrayDimension+)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }
		
		//name=ID dimension+=ArrayDimension+
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_1_0() { return cNameAssignment_1_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0_0() { return cNameIDTerminalRuleCall_1_1_0_0; }
		
		//dimension+=ArrayDimension+
		public Assignment getDimensionAssignment_1_1_1() { return cDimensionAssignment_1_1_1; }
		
		//ArrayDimension
		public RuleCall getDimensionArrayDimensionParserRuleCall_1_1_1_0() { return cDimensionArrayDimensionParserRuleCall_1_1_1_0; }
	}
	public class FunctionParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FunctionParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeVariableTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//FunctionParameter:
		//	type=VariableType name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//type=VariableType name=ID
		public Group getGroup() { return cGroup; }
		
		//type=VariableType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//VariableType
		public RuleCall getTypeVariableTypeParserRuleCall_0_0() { return cTypeVariableTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class VariableSymbolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.VariableSymbol");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableDeclerationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//VariableSymbol:
		//	VariableDecleration | FunctionParameter;
		@Override public ParserRule getRule() { return rule; }
		
		//VariableDecleration | FunctionParameter
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VariableDecleration
		public RuleCall getVariableDeclerationParserRuleCall_0() { return cVariableDeclerationParserRuleCall_0; }
		
		//FunctionParameter
		public RuleCall getFunctionParameterParserRuleCall_1() { return cFunctionParameterParserRuleCall_1; }
	}
	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntegerReferenceAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cDoubleReferenceAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueDOUBLETerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cStringReferenceAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cBooleanReferenceAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueBOOLEANTerminalRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cArrayReferenceAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cVariableReferenceAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cVariableReferenceVariableSymbolCrossReference_4_1_0 = (CrossReference)cVariableReferenceAssignment_4_1.eContents().get(0);
		private final RuleCall cVariableReferenceVariableSymbolIDTerminalRuleCall_4_1_0_1 = (RuleCall)cVariableReferenceVariableSymbolCrossReference_4_1_0.eContents().get(1);
		private final Assignment cDimensionAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cDimensionArrayDimensionParserRuleCall_4_2_0 = (RuleCall)cDimensionAssignment_4_2.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cVariableReferenceAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cVariableReferenceAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cVariableReferenceVariableSymbolCrossReference_5_1_0 = (CrossReference)cVariableReferenceAssignment_5_1.eContents().get(0);
		private final RuleCall cVariableReferenceVariableSymbolIDTerminalRuleCall_5_1_0_1 = (RuleCall)cVariableReferenceVariableSymbolCrossReference_5_1_0.eContents().get(1);
		
		//Atomic:
		//	{IntegerReference} value=INT | {DoubleReference} value=DOUBLE | {StringReference} value=STRING | {BooleanReference}
		//	value=BOOLEAN | {ArrayReference} variableReference=[VariableSymbol] dimension+=ArrayDimension+ | {VariableReference}
		//	variableReference=[VariableSymbol];
		@Override public ParserRule getRule() { return rule; }
		
		//{IntegerReference} value=INT | {DoubleReference} value=DOUBLE | {StringReference} value=STRING | {BooleanReference}
		//value=BOOLEAN | {ArrayReference} variableReference=[VariableSymbol] dimension+=ArrayDimension+ | {VariableReference}
		//variableReference=[VariableSymbol]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{IntegerReference} value=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//{IntegerReference}
		public Action getIntegerReferenceAction_0_0() { return cIntegerReferenceAction_0_0; }
		
		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }
		
		//{DoubleReference} value=DOUBLE
		public Group getGroup_1() { return cGroup_1; }
		
		//{DoubleReference}
		public Action getDoubleReferenceAction_1_0() { return cDoubleReferenceAction_1_0; }
		
		//value=DOUBLE
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//DOUBLE
		public RuleCall getValueDOUBLETerminalRuleCall_1_1_0() { return cValueDOUBLETerminalRuleCall_1_1_0; }
		
		//{StringReference} value=STRING
		public Group getGroup_2() { return cGroup_2; }
		
		//{StringReference}
		public Action getStringReferenceAction_2_0() { return cStringReferenceAction_2_0; }
		
		//value=STRING
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_1_0() { return cValueSTRINGTerminalRuleCall_2_1_0; }
		
		//{BooleanReference} value=BOOLEAN
		public Group getGroup_3() { return cGroup_3; }
		
		//{BooleanReference}
		public Action getBooleanReferenceAction_3_0() { return cBooleanReferenceAction_3_0; }
		
		//value=BOOLEAN
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//BOOLEAN
		public RuleCall getValueBOOLEANTerminalRuleCall_3_1_0() { return cValueBOOLEANTerminalRuleCall_3_1_0; }
		
		//{ArrayReference} variableReference=[VariableSymbol] dimension+=ArrayDimension+
		public Group getGroup_4() { return cGroup_4; }
		
		//{ArrayReference}
		public Action getArrayReferenceAction_4_0() { return cArrayReferenceAction_4_0; }
		
		//variableReference=[VariableSymbol]
		public Assignment getVariableReferenceAssignment_4_1() { return cVariableReferenceAssignment_4_1; }
		
		//[VariableSymbol]
		public CrossReference getVariableReferenceVariableSymbolCrossReference_4_1_0() { return cVariableReferenceVariableSymbolCrossReference_4_1_0; }
		
		//ID
		public RuleCall getVariableReferenceVariableSymbolIDTerminalRuleCall_4_1_0_1() { return cVariableReferenceVariableSymbolIDTerminalRuleCall_4_1_0_1; }
		
		//dimension+=ArrayDimension+
		public Assignment getDimensionAssignment_4_2() { return cDimensionAssignment_4_2; }
		
		//ArrayDimension
		public RuleCall getDimensionArrayDimensionParserRuleCall_4_2_0() { return cDimensionArrayDimensionParserRuleCall_4_2_0; }
		
		//{VariableReference} variableReference=[VariableSymbol]
		public Group getGroup_5() { return cGroup_5; }
		
		//{VariableReference}
		public Action getVariableReferenceAction_5_0() { return cVariableReferenceAction_5_0; }
		
		//variableReference=[VariableSymbol]
		public Assignment getVariableReferenceAssignment_5_1() { return cVariableReferenceAssignment_5_1; }
		
		//[VariableSymbol]
		public CrossReference getVariableReferenceVariableSymbolCrossReference_5_1_0() { return cVariableReferenceVariableSymbolCrossReference_5_1_0; }
		
		//ID
		public RuleCall getVariableReferenceVariableSymbolIDTerminalRuleCall_5_1_0_1() { return cVariableReferenceVariableSymbolIDTerminalRuleCall_5_1_0_1; }
	}
	public class VariableReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.VariableReturn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReturnAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReturnAtomicParserRuleCall_1_0 = (RuleCall)cReturnAssignment_1.eContents().get(0);
		
		//VariableReturn:
		//	'return' return=Atomic;
		@Override public ParserRule getRule() { return rule; }
		
		//'return' return=Atomic
		public Group getGroup() { return cGroup; }
		
		//'return'
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }
		
		//return=Atomic
		public Assignment getReturnAssignment_1() { return cReturnAssignment_1; }
		
		//Atomic
		public RuleCall getReturnAtomicParserRuleCall_1_0() { return cReturnAtomicParserRuleCall_1_0; }
	}
	public class AtomicOrFunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.AtomicOrFunctionCall");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAtomicParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAbstractFunctionCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AtomicOrFunctionCall:
		//	Atomic | AbstractFunctionCall;
		@Override public ParserRule getRule() { return rule; }
		
		//Atomic | AbstractFunctionCall
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Atomic
		public RuleCall getAtomicParserRuleCall_0() { return cAtomicParserRuleCall_0; }
		
		//AbstractFunctionCall
		public RuleCall getAbstractFunctionCallParserRuleCall_1() { return cAbstractFunctionCallParserRuleCall_1; }
	}
	public class FunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FunctionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReturnAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReturnVariableTypeParserRuleCall_1_0 = (RuleCall)cReturnAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParametersAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParametersFunctionParameterParserRuleCall_4_0_0 = (RuleCall)cParametersAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParametersFunctionParameterParserRuleCall_4_1_1_0 = (RuleCall)cParametersAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cBodyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBodyExpressionParserRuleCall_7_0 = (RuleCall)cBodyAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//FunctionDefinition:
		//	'function' return=VariableType name=ID '(' (parameters+=FunctionParameter (',' parameters+=FunctionParameter)*)? ')'
		//	'{'
		//	body+=Expression*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'function' return=VariableType name=ID '(' (parameters+=FunctionParameter (',' parameters+=FunctionParameter)*)? ')' '{'
		//body+=Expression* '}'
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//return=VariableType
		public Assignment getReturnAssignment_1() { return cReturnAssignment_1; }
		
		//VariableType
		public RuleCall getReturnVariableTypeParserRuleCall_1_0() { return cReturnVariableTypeParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(parameters+=FunctionParameter (',' parameters+=FunctionParameter)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//parameters+=FunctionParameter
		public Assignment getParametersAssignment_4_0() { return cParametersAssignment_4_0; }
		
		//FunctionParameter
		public RuleCall getParametersFunctionParameterParserRuleCall_4_0_0() { return cParametersFunctionParameterParserRuleCall_4_0_0; }
		
		//(',' parameters+=FunctionParameter)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//parameters+=FunctionParameter
		public Assignment getParametersAssignment_4_1_1() { return cParametersAssignment_4_1_1; }
		
		//FunctionParameter
		public RuleCall getParametersFunctionParameterParserRuleCall_4_1_1_0() { return cParametersFunctionParameterParserRuleCall_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//body+=Expression*
		public Assignment getBodyAssignment_7() { return cBodyAssignment_7; }
		
		//Expression
		public RuleCall getBodyExpressionParserRuleCall_7_0() { return cBodyExpressionParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFunctionFunctionDefinitionCrossReference_1_0 = (CrossReference)cFunctionAssignment_1.eContents().get(0);
		private final RuleCall cFunctionFunctionDefinitionIDTerminalRuleCall_1_0_1 = (RuleCall)cFunctionFunctionDefinitionCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersAtomicParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersAtomicParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FunctionCall:
		//	{FunctionCall} function=[FunctionDefinition] '(' (parameters+=Atomic (',' parameters+=Atomic)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{FunctionCall} function=[FunctionDefinition] '(' (parameters+=Atomic (',' parameters+=Atomic)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//{FunctionCall}
		public Action getFunctionCallAction_0() { return cFunctionCallAction_0; }
		
		//function=[FunctionDefinition]
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }
		
		//[FunctionDefinition]
		public CrossReference getFunctionFunctionDefinitionCrossReference_1_0() { return cFunctionFunctionDefinitionCrossReference_1_0; }
		
		//ID
		public RuleCall getFunctionFunctionDefinitionIDTerminalRuleCall_1_0_1() { return cFunctionFunctionDefinitionIDTerminalRuleCall_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(parameters+=Atomic (',' parameters+=Atomic)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//parameters+=Atomic
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }
		
		//Atomic
		public RuleCall getParametersAtomicParserRuleCall_3_0_0() { return cParametersAtomicParserRuleCall_3_0_0; }
		
		//(',' parameters+=Atomic)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//parameters+=Atomic
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }
		
		//Atomic
		public RuleCall getParametersAtomicParserRuleCall_3_1_1_0() { return cParametersAtomicParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class BuiltinFunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BuiltinFunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBuiltinFunctionCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionBuiltinFunctionsParserRuleCall_1_0 = (RuleCall)cFunctionAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersAtomicParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersAtomicParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//BuiltinFunctionCall:
		//	{BuiltinFunctionCall} function=BuiltinFunctions '(' (parameters+=Atomic (',' parameters+=Atomic)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{BuiltinFunctionCall} function=BuiltinFunctions '(' (parameters+=Atomic (',' parameters+=Atomic)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//{BuiltinFunctionCall}
		public Action getBuiltinFunctionCallAction_0() { return cBuiltinFunctionCallAction_0; }
		
		//function=BuiltinFunctions
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }
		
		//BuiltinFunctions
		public RuleCall getFunctionBuiltinFunctionsParserRuleCall_1_0() { return cFunctionBuiltinFunctionsParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(parameters+=Atomic (',' parameters+=Atomic)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//parameters+=Atomic
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }
		
		//Atomic
		public RuleCall getParametersAtomicParserRuleCall_3_0_0() { return cParametersAtomicParserRuleCall_3_0_0; }
		
		//(',' parameters+=Atomic)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//parameters+=Atomic
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }
		
		//Atomic
		public RuleCall getParametersAtomicParserRuleCall_3_1_1_0() { return cParametersAtomicParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class AbstractFunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.AbstractFunctionCall");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunctionCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBuiltinFunctionCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractFunctionCall:
		//	FunctionCall | BuiltinFunctionCall;
		@Override public ParserRule getRule() { return rule; }
		
		//FunctionCall | BuiltinFunctionCall
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_0() { return cFunctionCallParserRuleCall_0; }
		
		//BuiltinFunctionCall
		public RuleCall getBuiltinFunctionCallParserRuleCall_1() { return cBuiltinFunctionCallParserRuleCall_1; }
	}
	
	
	private final InkAppElements pInkApp;
	private final OperatorElements pOperator;
	private final BuiltinFunctionsElements pBuiltinFunctions;
	private final BreakElements pBreak;
	private final TerminalRule tDOUBLE;
	private final TerminalRule tBOOLEAN;
	private final VariableTypeElements pVariableType;
	private final GlobalVariableElements pGlobalVariable;
	private final MainElements pMain;
	private final FunctionBodyElements pFunctionBody;
	private final EntryTaskElements pEntryTask;
	private final TaskElements pTask;
	private final IfExpressionElements pIfExpression;
	private final ForExpressionElements pForExpression;
	private final WhileExpressionElements pWhileExpression;
	private final ExpressionElements pExpression;
	private final OperationExpressionElements pOperationExpression;
	private final OperationElements pOperation;
	private final ArrayDimensionElements pArrayDimension;
	private final VariableDeclerationElements pVariableDecleration;
	private final FunctionParameterElements pFunctionParameter;
	private final VariableSymbolElements pVariableSymbol;
	private final AtomicElements pAtomic;
	private final VariableReturnElements pVariableReturn;
	private final AtomicOrFunctionCallElements pAtomicOrFunctionCall;
	private final FunctionDefinitionElements pFunctionDefinition;
	private final FunctionCallElements pFunctionCall;
	private final BuiltinFunctionCallElements pBuiltinFunctionCall;
	private final AbstractFunctionCallElements pAbstractFunctionCall;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pInkApp = new InkAppElements();
		this.pOperator = new OperatorElements();
		this.pBuiltinFunctions = new BuiltinFunctionsElements();
		this.pBreak = new BreakElements();
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DOUBLE");
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BOOLEAN");
		this.pVariableType = new VariableTypeElements();
		this.pGlobalVariable = new GlobalVariableElements();
		this.pMain = new MainElements();
		this.pFunctionBody = new FunctionBodyElements();
		this.pEntryTask = new EntryTaskElements();
		this.pTask = new TaskElements();
		this.pIfExpression = new IfExpressionElements();
		this.pForExpression = new ForExpressionElements();
		this.pWhileExpression = new WhileExpressionElements();
		this.pExpression = new ExpressionElements();
		this.pOperationExpression = new OperationExpressionElements();
		this.pOperation = new OperationElements();
		this.pArrayDimension = new ArrayDimensionElements();
		this.pVariableDecleration = new VariableDeclerationElements();
		this.pFunctionParameter = new FunctionParameterElements();
		this.pVariableSymbol = new VariableSymbolElements();
		this.pAtomic = new AtomicElements();
		this.pVariableReturn = new VariableReturnElements();
		this.pAtomicOrFunctionCall = new AtomicOrFunctionCallElements();
		this.pFunctionDefinition = new FunctionDefinitionElements();
		this.pFunctionCall = new FunctionCallElements();
		this.pBuiltinFunctionCall = new BuiltinFunctionCallElements();
		this.pAbstractFunctionCall = new AbstractFunctionCallElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//InkApp:
	//	globals+=GlobalVariable*
	//	tasks+=Task*
	//	entry=EntryTask;
	public InkAppElements getInkAppAccess() {
		return pInkApp;
	}
	
	public ParserRule getInkAppRule() {
		return getInkAppAccess().getRule();
	}
	
	//Operator:
	//	'-' | '+' | '/' | '*' | '>=' | '<=' | '==' | '!=' | '<' | '>' | '=' | 'AND' | 'OR';
	public OperatorElements getOperatorAccess() {
		return pOperator;
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}
	
	//BuiltinFunctions:
	//	'print';
	public BuiltinFunctionsElements getBuiltinFunctionsAccess() {
		return pBuiltinFunctions;
	}
	
	public ParserRule getBuiltinFunctionsRule() {
		return getBuiltinFunctionsAccess().getRule();
	}
	
	//Break:
	//	{Break} break='break';
	public BreakElements getBreakAccess() {
		return pBreak;
	}
	
	public ParserRule getBreakRule() {
		return getBreakAccess().getRule();
	}
	
	//terminal DOUBLE returns ecore::EDouble:
	//	INT '.' INT;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//terminal BOOLEAN returns ecore::EBoolean:
	//	'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//VariableType:
	//	{VariableType} 'string' | {VariableType} 'integer' | {VariableType} 'boolean';
	public VariableTypeElements getVariableTypeAccess() {
		return pVariableType;
	}
	
	public ParserRule getVariableTypeRule() {
		return getVariableTypeAccess().getRule();
	}
	
	//GlobalVariable:
	//	{GlobalVariable}
	//	'GLOBAL' variable=VariableDecleration;
	public GlobalVariableElements getGlobalVariableAccess() {
		return pGlobalVariable;
	}
	
	public ParserRule getGlobalVariableRule() {
		return getGlobalVariableAccess().getRule();
	}
	
	//Main:
	//	{Main} variableDeclerations+=VariableDecleration*
	//	body+=Expression*;
	public MainElements getMainAccess() {
		return pMain;
	}
	
	public ParserRule getMainRule() {
		return getMainAccess().getRule();
	}
	
	//FunctionBody:
	//	{FunctionBody} variableDeclerations+=VariableDecleration*
	//	body+=Expression*;
	public FunctionBodyElements getFunctionBodyAccess() {
		return pFunctionBody;
	}
	
	public ParserRule getFunctionBodyRule() {
		return getFunctionBodyAccess().getRule();
	}
	
	//EntryTask:
	//	'entry' task=Task;
	public EntryTaskElements getEntryTaskAccess() {
		return pEntryTask;
	}
	
	public ParserRule getEntryTaskRule() {
		return getEntryTaskAccess().getRule();
	}
	
	//Task:
	//	'task' name=ID '{'
	//	body+=VariableDecleration*
	//	body+=Expression* ('next' task=[Task] | 'end')
	//	'}';
	public TaskElements getTaskAccess() {
		return pTask;
	}
	
	public ParserRule getTaskRule() {
		return getTaskAccess().getRule();
	}
	
	//IfExpression:
	//	'if' '(' ifcondition=OperationExpression ')' '{'
	//	ifbody+=Expression*
	//	ifbody+=Break?
	//	'}' ('else' 'if' '(' elsecondition+=OperationExpression ')' '{'
	//	elseifbody+=Expression*
	//	elseifbody+=Break?
	//	'}')* ('else' '{'
	//	elsebody+=Expression*
	//	elseifbody+=Break?
	//	'}')?;
	public IfExpressionElements getIfExpressionAccess() {
		return pIfExpression;
	}
	
	public ParserRule getIfExpressionRule() {
		return getIfExpressionAccess().getRule();
	}
	
	//ForExpression:
	//	'for' '(' initial=OperationExpression ';' test=OperationExpression ';' update=OperationExpression ')' '{'
	//	body+=Expression*
	//	body+=Break?
	//	'}';
	public ForExpressionElements getForExpressionAccess() {
		return pForExpression;
	}
	
	public ParserRule getForExpressionRule() {
		return getForExpressionAccess().getRule();
	}
	
	//WhileExpression:
	//	'while' '(' test=OperationExpression ')' '{'
	//	body+=Expression*
	//	body+=Break?
	//	'}';
	public WhileExpressionElements getWhileExpressionAccess() {
		return pWhileExpression;
	}
	
	public ParserRule getWhileExpressionRule() {
		return getWhileExpressionAccess().getRule();
	}
	
	//Expression:
	//	OperationExpression | IfExpression | ForExpression | WhileExpression | BuiltinFunctionCall;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	////Expression:
	////	{Expression} 
	////	exp += OperationExpression*
	////	exp += IfExpression*
	////	exp += ForExpression*
	////	exp += WhileExpression*
	////;
	////BlockBody:
	////	{BlockBody} 
	////	expression += Expression*
	////;
	//OperationExpression:
	//	Operation;
	public OperationExpressionElements getOperationExpressionAccess() {
		return pOperationExpression;
	}
	
	public ParserRule getOperationExpressionRule() {
		return getOperationExpressionAccess().getRule();
	}
	
	//Operation OperationExpression:
	//	Atomic ({Operation.left=current} (operator+=Operator right+=AtomicOrFunctionCall)*);
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//ArrayDimension:
	//	{ArrayDimension}
	//	'[' (index=[VariableSymbol] | size=INT) ']';
	public ArrayDimensionElements getArrayDimensionAccess() {
		return pArrayDimension;
	}
	
	public ParserRule getArrayDimensionRule() {
		return getArrayDimensionAccess().getRule();
	}
	
	//VariableDecleration:
	//	type=VariableType (name=ID | name=ID dimension+=ArrayDimension+);
	public VariableDeclerationElements getVariableDeclerationAccess() {
		return pVariableDecleration;
	}
	
	public ParserRule getVariableDeclerationRule() {
		return getVariableDeclerationAccess().getRule();
	}
	
	//FunctionParameter:
	//	type=VariableType name=ID;
	public FunctionParameterElements getFunctionParameterAccess() {
		return pFunctionParameter;
	}
	
	public ParserRule getFunctionParameterRule() {
		return getFunctionParameterAccess().getRule();
	}
	
	//VariableSymbol:
	//	VariableDecleration | FunctionParameter;
	public VariableSymbolElements getVariableSymbolAccess() {
		return pVariableSymbol;
	}
	
	public ParserRule getVariableSymbolRule() {
		return getVariableSymbolAccess().getRule();
	}
	
	//Atomic:
	//	{IntegerReference} value=INT | {DoubleReference} value=DOUBLE | {StringReference} value=STRING | {BooleanReference}
	//	value=BOOLEAN | {ArrayReference} variableReference=[VariableSymbol] dimension+=ArrayDimension+ | {VariableReference}
	//	variableReference=[VariableSymbol];
	public AtomicElements getAtomicAccess() {
		return pAtomic;
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}
	
	//VariableReturn:
	//	'return' return=Atomic;
	public VariableReturnElements getVariableReturnAccess() {
		return pVariableReturn;
	}
	
	public ParserRule getVariableReturnRule() {
		return getVariableReturnAccess().getRule();
	}
	
	//AtomicOrFunctionCall:
	//	Atomic | AbstractFunctionCall;
	public AtomicOrFunctionCallElements getAtomicOrFunctionCallAccess() {
		return pAtomicOrFunctionCall;
	}
	
	public ParserRule getAtomicOrFunctionCallRule() {
		return getAtomicOrFunctionCallAccess().getRule();
	}
	
	//FunctionDefinition:
	//	'function' return=VariableType name=ID '(' (parameters+=FunctionParameter (',' parameters+=FunctionParameter)*)? ')'
	//	'{'
	//	body+=Expression*
	//	'}';
	public FunctionDefinitionElements getFunctionDefinitionAccess() {
		return pFunctionDefinition;
	}
	
	public ParserRule getFunctionDefinitionRule() {
		return getFunctionDefinitionAccess().getRule();
	}
	
	//FunctionCall:
	//	{FunctionCall} function=[FunctionDefinition] '(' (parameters+=Atomic (',' parameters+=Atomic)*)? ')';
	public FunctionCallElements getFunctionCallAccess() {
		return pFunctionCall;
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}
	
	//BuiltinFunctionCall:
	//	{BuiltinFunctionCall} function=BuiltinFunctions '(' (parameters+=Atomic (',' parameters+=Atomic)*)? ')';
	public BuiltinFunctionCallElements getBuiltinFunctionCallAccess() {
		return pBuiltinFunctionCall;
	}
	
	public ParserRule getBuiltinFunctionCallRule() {
		return getBuiltinFunctionCallAccess().getRule();
	}
	
	//AbstractFunctionCall:
	//	FunctionCall | BuiltinFunctionCall;
	public AbstractFunctionCallElements getAbstractFunctionCallAccess() {
		return pAbstractFunctionCall;
	}
	
	public ParserRule getAbstractFunctionCallRule() {
		return getAbstractFunctionCallAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
