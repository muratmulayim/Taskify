/**
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.Task;
import org.xtext.example.mydsl.myDsl.TaskBody;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Task Body</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.TaskBodyImpl#getBody <em>Body</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.TaskBodyImpl#getNexttask <em>Nexttask</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.TaskBodyImpl#getEndtask <em>Endtask</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TaskBodyImpl extends MinimalEObjectImpl.Container implements TaskBody
{
  /**
   * The cached value of the '{@link #getBody() <em>Body</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBody()
   * @generated
   * @ordered
   */
  protected EList<EObject> body;

  /**
   * The cached value of the '{@link #getNexttask() <em>Nexttask</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNexttask()
   * @generated
   * @ordered
   */
  protected Task nexttask;

  /**
   * The default value of the '{@link #getEndtask() <em>Endtask</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEndtask()
   * @generated
   * @ordered
   */
  protected static final String ENDTASK_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getEndtask() <em>Endtask</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEndtask()
   * @generated
   * @ordered
   */
  protected String endtask = ENDTASK_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TaskBodyImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.TASK_BODY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EObject> getBody()
  {
    if (body == null)
    {
      body = new EObjectContainmentEList<EObject>(EObject.class, this, MyDslPackage.TASK_BODY__BODY);
    }
    return body;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Task getNexttask()
  {
    if (nexttask != null && nexttask.eIsProxy())
    {
      InternalEObject oldNexttask = (InternalEObject)nexttask;
      nexttask = (Task)eResolveProxy(oldNexttask);
      if (nexttask != oldNexttask)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MyDslPackage.TASK_BODY__NEXTTASK, oldNexttask, nexttask));
      }
    }
    return nexttask;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Task basicGetNexttask()
  {
    return nexttask;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNexttask(Task newNexttask)
  {
    Task oldNexttask = nexttask;
    nexttask = newNexttask;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.TASK_BODY__NEXTTASK, oldNexttask, nexttask));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getEndtask()
  {
    return endtask;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEndtask(String newEndtask)
  {
    String oldEndtask = endtask;
    endtask = newEndtask;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.TASK_BODY__ENDTASK, oldEndtask, endtask));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.TASK_BODY__BODY:
        return ((InternalEList<?>)getBody()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.TASK_BODY__BODY:
        return getBody();
      case MyDslPackage.TASK_BODY__NEXTTASK:
        if (resolve) return getNexttask();
        return basicGetNexttask();
      case MyDslPackage.TASK_BODY__ENDTASK:
        return getEndtask();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.TASK_BODY__BODY:
        getBody().clear();
        getBody().addAll((Collection<? extends EObject>)newValue);
        return;
      case MyDslPackage.TASK_BODY__NEXTTASK:
        setNexttask((Task)newValue);
        return;
      case MyDslPackage.TASK_BODY__ENDTASK:
        setEndtask((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.TASK_BODY__BODY:
        getBody().clear();
        return;
      case MyDslPackage.TASK_BODY__NEXTTASK:
        setNexttask((Task)null);
        return;
      case MyDslPackage.TASK_BODY__ENDTASK:
        setEndtask(ENDTASK_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.TASK_BODY__BODY:
        return body != null && !body.isEmpty();
      case MyDslPackage.TASK_BODY__NEXTTASK:
        return nexttask != null;
      case MyDslPackage.TASK_BODY__ENDTASK:
        return ENDTASK_EDEFAULT == null ? endtask != null : !ENDTASK_EDEFAULT.equals(endtask);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (endtask: ");
    result.append(endtask);
    result.append(')');
    return result.toString();
  }

} //TaskBodyImpl
