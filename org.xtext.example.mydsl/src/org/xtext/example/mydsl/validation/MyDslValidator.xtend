/*
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl.validation

import org.eclipse.xtext.validation.Check
import org.xtext.example.mydsl.myDsl.MyDslPackage
import org.xtext.example.mydsl.myDsl.VariableDeclerationExpression
import org.xtext.example.mydsl.myDsl.InkApp
import org.xtext.example.mydsl.myDsl.SharedVariableExpression
import org.eclipse.emf.common.util.EList
import org.xtext.example.mydsl.myDsl.FunctionDefinitionParameters
import org.xtext.example.mydsl.myDsl.FunctionDefinitionParameter
import org.eclipse.xtext.nodemodel.INode
import org.eclipse.xtext.nodemodel.util.NodeModelUtils
import org.eclipse.emf.ecore.EObject

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class MyDslValidator extends AbstractMyDslValidator {
    
    public static val SAME_ID_WITH_SHARED = 'sameIdWithShared'
    public static val SAME_PARAMETER_WITH_SHARED = 'sameParameterWithShared'

    def int getOffset(EObject expr) {
        val INode node = NodeModelUtils.getNode(expr);
        return node.offset
    }
    
    @Check
    def addSharedsToSymbolTable(InkApp inkApp) {
        SymbolTable.resetTable()
        
        if (inkApp.sharedBlock !== null) {
            val EList<SharedVariableExpression> shareds = inkApp.sharedBlock.variables
            
            for (SharedVariableExpression shared: shareds) {
                val String name = shared.name
                SymbolTable.addName(name)
            }
        }
    }
    
    @Check
    def checkIfLocalVariableNameSameWithShared(VariableDeclerationExpression variableDeclerationExpression) {
        val String name = variableDeclerationExpression.name
        
        if (SymbolTable.isExist(name)) {
            error("Local variable '" + name + "' cannot be same with shared variable name.", 
                MyDslPackage.Literals.VARIABLE_DECLERATION_EXPRESSION__DIMENSION, 
                -1, 
                SAME_ID_WITH_SHARED,
                variableDeclerationExpression.type,
                name
            ) 
        }  
    }
    
    @Check
    def checkFunctionParameterNameSameWithShared(FunctionDefinitionParameters parameters) {
        val EList<FunctionDefinitionParameter> params = parameters.typedVariableList
        for (FunctionDefinitionParameter param: params) {
            if (SymbolTable.isExist(param.name)) {
                error("Function parameter '" + param.name + "' cannot be same with shared variable name.", 
                    MyDslPackage.Literals.FUNCTION_DEFINITION_PARAMETERS__TYPED_VARIABLE_LIST, 
                    getOffset(param),  // the point where the error starts
                    SAME_PARAMETER_WITH_SHARED,
                    param.type,
                    param.name
                )  
            }
        }
    }

}
