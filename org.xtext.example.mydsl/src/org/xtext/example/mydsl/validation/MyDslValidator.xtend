/*
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl.validation

import org.eclipse.xtext.validation.Check
import org.xtext.example.mydsl.myDsl.VariableAssignmentExpression
import org.xtext.example.mydsl.myDsl.MyDslPackage
import org.xtext.example.mydsl.myDsl.VariableReference
import org.xtext.example.mydsl.myDsl.impl.VariableDeclerationExpressionImpl
import org.xtext.example.mydsl.myDsl.VariableDeclerationExpression

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class MyDslValidator extends AbstractMyDslValidator {
	
//	public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					MyDslPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}

//	@Check
//	def checkOperationDataType(VariableAssignmentExpression expression) {
//		var assigneeType = expression.variable;
////		var assigneeType = expression.variable.variableReference;
//		if (assigneeType === null) {
//			error("Assignee cannot be empty.", MyDslPackage.Literals.VARIABLE_ASSIGNMENT_EXPRESSION__VARIABLE)
//		}
//	}
	
//	def getType(VariableReference reference) {
//		return ((VariableDeclerationExpression) reference.variableReference).type.type
//	}

}
